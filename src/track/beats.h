#pragma once

#include <QByteArray>
#include <QList>
#include <QMutex>
#include <QObject>
#include <QString>
#include <QVector>
#include <memory>

#include "audio/streaminfo.h"
#include "proto/beats.pb.h"
#include "track/beat.h"
#include "track/bpm.h"
#include "track/frame.h"
#include "track/timesignature.h"
#include "util/types.h"

namespace mixxx {
class Beats;
typedef std::shared_ptr<Beats> BeatsPointer;
} // namespace mixxx

class Track;

namespace mixxx {
enum class BPMScale {
    Double,
    Halve,
    TwoThirds,
    ThreeFourths,
    FourThirds,
    ThreeHalves,
};

/// This is an intermediate class which encapsulates the beats into a
/// plain copyable, movable object.
class BeatsInternal {
  public:
    explicit BeatsInternal(const audio::StreamInfo& streamInfo = audio::StreamInfo());
    void initWithProtobuf(const QByteArray& byteArray);
    void initWithAnalyzer(const QVector<FramePos>& beats,
            const QVector<track::io::TimeSignatureMarker>&
                    timeSignatureMarkers =
                            QVector<track::io::TimeSignatureMarker>());

    static const QString kBeatMapVersion;
    static const QString kBeatGridVersion1;
    static const QString kBeatGridVersion2;
    static const QString kBeatsVersion;
    std::optional<Beat> findNthBeat(FramePos frame, int offset) const;
    std::optional<Beat> findNextBeat(FramePos frame) const;
    std::optional<Beat> findPrevBeat(FramePos frame) const;
    Bpm getGlobalBpm() const;
    bool isValid() const;
    void updateStreamInfo(const mixxx::audio::StreamInfo& streamInfo);
    int numBeatsInRange(FramePos startFrame, FramePos endFrame) const;
    QByteArray toProtobuf() const;
    QString getVersion() const;
    QString getSubVersion() const;
    void setSubVersion(const QString& subVersion);
    void scale(BPMScale scale);
    FramePos findNBeatsFromFrame(FramePos fromFrame, double beats) const;
    QPair<std::optional<Beat>, std::optional<Beat>> findPrevNextBeats(FramePos frame) const;
    void setGrid(Bpm dBpm, FramePos firstBeatFrame = kStartFramePos);
    FramePos findClosestBeat(FramePos frame) const;
    Bpm getBpmAtPosition(FramePos curFrame) const;
    void setSignature(TimeSignature sig, int downbeatIndex);
    void translateBySeconds(double seconds);
    void setBpm(Bpm bpm, int beatIndex = kFirstBeatIndex);
    int size() const;
    FramePos getFirstBeatPosition() const;
    FramePos getLastBeatPosition() const;
    std::optional<Beat> getBeatAtIndex(int index) const;
    void setAsDownbeat(int beatIndex);
    void clear();

  private:
    void updateGlobalBpm();
    void scaleDouble();
    void scaleTriple();
    void scaleQuadruple();
    void scaleHalve();
    void scaleThird();
    void scaleFourth();
    void scaleMultiple(uint multiple);
    void scaleFraction(uint fraction);
    void generateBeatsFromMarkers();
    void consolidateMarkers();
    SINT getSampleRate() const;
    double getDurationSeconds() const;
    void setFirstBeatFrame(FramePos framePos);
    FramePos getFirstBeatFrame() const;

    QString m_subVersion;
    Bpm m_bpm;
    BeatList m_beats;
    track::io::Beats m_beatsProto;
    audio::StreamInfo m_streamInfo;
    friend QDebug operator<<(QDebug dbg, const BeatsInternal& arg);
};

/// Beats is a class for BPM and beat management classes.
/// It stores beats information including beats position, down beats position,
/// phrase beat position and changes in tempo.
class Beats final : public QObject {
    Q_OBJECT
  private:
    explicit Beats(const BeatsInternal& internal = BeatsInternal());

  public:
    ~Beats() override = default;
    Beats(const Beats& other) = delete;

    /// The source of this byte array is the serialized representation of beats
    /// generated by the protocol buffer and stored in the database.
    void initWithProtobuf(const QByteArray& byteArray);
    /// A list of beat locations in audio frames may be provided.
    /// The source of this data is the analyzer.
    void initWithAnalyzer(const QVector<FramePos>& beats,
            const QVector<track::io::TimeSignatureMarker>&
                    timeSignatureMarkers =
                            QVector<track::io::TimeSignatureMarker>());

    /// Serializes into a protobuf.
    QByteArray toProtobuf() const;

    /// Returns a string representing the version of the beat-processing code that
    /// produced this Beats instance. Used by BeatsFactory for associating a
    /// given serialization with the version that produced it.
    QString getVersion() const;

    /// Return a string that represent the preferences used to generate
    /// the beats object.
    QString getSubVersion() const;

    void setSubVersion(const QString& subVersion);

    /// Initializes the BeatGrid to have a BPM of dBpm and the first beat offset
    /// of firstBeatFrame.
    void setGrid(Bpm dBpm, FramePos firstBeatFrame = kStartFramePos);

    /// Starting from frame, return the next beat
    /// in the track, or invalid beat if none exists. If frame refers to the location
    /// of a beat, the same beat is returned.
    std::optional<Beat> findNextBeat(FramePos frame) const;

    /// Starting from frame, return the previous beat
    /// in the track, or invalid beat if none exists. If frame refers to the
    /// location of beat, the same beat is returned.
    std::optional<Beat> findPrevBeat(FramePos frame) const;

    /// Starting from frame, fill the prev and next beats.
    /// If frame refers to the location of the beat, the first
    /// value is beat, and the second value is the next beat.
    QPair<std::optional<Beat>, std::optional<Beat>> findPrevNextBeats(FramePos frame) const;

    /// Starting from frame, return the frame number of the closest beat
    /// in the track, or kInvalidFramePos if none exists.
    FramePos findClosestBeat(FramePos frame) const;

    /// Find the Nth beat from frame. Works with both positive and
    /// negative values of n. If frame refers to the location of a beat,
    /// then the same beat is returned. If no beat can be found, returns std::nullopt.
    std::optional<Beat> findNthBeat(FramePos frame, int offset) const;

    int numBeatsInRange(FramePos startFrame, FramePos endFrame) const;

    /// Find the frame N beats away from frame. The number of beats may be
    /// negative and does not need to be an integer.
    FramePos findNBeatsFromFrame(FramePos fromFrame, double beats) const;

    /// Return Beat at (0 based) index
    std::optional<Beat> getBeatAtIndex(int index) const;

    /// Return the average BPM over the entire track if the BPM is
    /// valid, otherwise returns Bpm().
    Bpm getGlobalBpm() const;

    /// Return the instantaneous BPM at a position.
    Bpm getBpmAtPosition(FramePos curFrame) const;

    /// Sets the track signature starting at specified bar
    void setSignature(TimeSignature sig, int downbeatIndex);

    /// Translate all beats in the song by a time duration (can be negative).
    /// Beats that lie before the start of the track or after the end of the
    /// track are not removed.
    void translateBySeconds(double seconds);

    /// Scale the position of every beat in the track by a fraction.
    void scale(BPMScale scale);

    /// Set bpm marker at a beat
    void setBpm(Bpm bpm, int beatIndex = kFirstBeatIndex);

    /// Returns the number of beats
    int size() const;

    /// Returns the frame number for the first beat, kInvalidFramePos if there are no beats.
    FramePos getFirstBeatPosition() const;

    /// Returns the frame number for the last beat, kInvalidFramePos if there are no beats.
    FramePos getLastBeatPosition() const;

    /// Convert a non-downbeat to a downbeat shifting all downbeats
    void setAsDownbeat(int beatIndex);

    /// Prints debugging information in stderr
    friend QDebug operator<<(QDebug dbg, const BeatsPointer& arg);

    /// Update stream info encapsulating sample rate and track duration.
    void updateStreamInfo(const mixxx::audio::StreamInfo& streamInfo);

    /// Get the internal copyable Beats object.
    BeatsInternal getInternal() const;

    /// Clear Beats without clearing stored StreamInfo
    void clear();

    friend class ::Track;

  private:
    mutable QMutex m_mutex;
    BeatsInternal m_beatsInternal;

  signals:
    void updated();
};
} // namespace mixxx
