/* LateNight 2.3 // common layout settings */

/************** font settings *************************************************/

#Mixxx,
WWidget,
QToolTip,
WLabel, QLabel,
WNumber, WNumberPos,
WPushButton,
WKey,
WTime,
WTrackText,
WTrackProperty,
WRecordingDuration,
WOverview #PassthroughLabel,
WBeatSpinBox QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCueMenuPopup QLabel,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu,
WOverview /* Hotcue labels in the overview */,
QSpinBox,
WBeatSpinBox, #spinBoxTransition,
QComboBox,
WEffect,
WEffectSelector,
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox,
#fadeModeCombobox QAbstractScrollArea,
#LibraryContainer QPushButton,
#LibraryContainer QLabel,
#LibraryContainer QRadioButton,
#LibraryContainer QHeaderView,
#LibraryContainer QHeaderView::item,
#LibraryContainer QMenu {
  /* On Linux all weight variants of Open Sans are identified
  as "Open Sans".
  On Windows however, the semi-bold variant is identified as
  "Open Sans Semibold", thus we need to set some font weights
  in style_windows.qss */
  font-family: "Open Sans";
  font-weight: 500; /* semi-bold */
  font-style: normal;
  text-transform: none;
}

/* Bold */
#KnobLabel,
/* Passthrough label on overview waveform */
WOverview #PassthroughLabel,
#EQKillButton,
#FxUnitLabel,
#MicAuxLabel, #MicAuxLabelUnconfigured,
#LatencyLabel,
#VinylControls WPushButton,
#FxAssignButtons WPushButton,
#SamplerTitleMini,
#GuiToggleButton,
#RecFeedback, #RecDuration,
#BroadcastButton,
/* SKin settings & Library */
#SkinSettingsToggle,
#SkinSettingsNumToggle[value="1"],
#LibraryFeatureControls QPushButton,
QLabel#labelRecFilename, /* needs QLabel to override previous QLabel font definition*/
WEffectSelector,
#fadeModeCombobox,
WOverview #PassthroughLabel {
  font-weight: bold;
}

/* All capitals */
#KnobLabel,
#FxUnitLabel,
#MicAuxLabel, #MicAuxLabelUnconfigured,
#VinylControls WPushButton,
#FxAssignButtons WPushButton,
#GuiToggleButton,
#RecFeedback, #RecDuration,
#BroadcastButton,
#SkinSettingsToggle,
#LibraryFeatureControls QPushButton {
  text-transform: uppercase;
}
/* regular font weight */
#SkinSettingsButton,
#SkinSettingsNumToggle,
#SkinSettingsMixerToggle,
#SkinSettingsText,
QToolTip,
#LibraryContainer QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu,
WBeatSpinBox QMenu,
QLabel#labelRecPrefix,
QLabel#labelRecStatistics {
  font-weight: normal;
}

#LibraryContainer QMenu::indicator {
  margin-right: 10px;
}

/* WMainMenuBar #MainMenu is difficult to style, at least when
  it should look identical on Windows AND Linux.
  Paddings and margins affect the item labels and checkboxes entirely
  different so we need style_linux.qss and style_windows.qss to take
  care of it individually.
  Luckily we don't need to care about macOS here -Woohoo!- because
  there the memnu bar is always styled natively. */
#MainMenu {
  margin-bottom: 0px;
  padding-bottom: 0px;
}
#MainMenu::item {
  /* No big deal, just try to make it look like native menus */
  padding: 0.1em 0.5em 0.1em 0.5em;
  margin: 0em;
}
#MainMenu QMenu::item {
  /*  Xfce/Gnome:
        padding(-left) is applied to entire item (text + opt. icon)
        = icon may overlap text
        = item labels are always aligned, with or without checkbox/icon
      Fedora/Arch/Windows:
        padding(-left) is applied to text only
        = does NOT align items with and without checkboxes */
  /* The style below SHOULD yield identical results on all target OS,
    yet it looks slightly different, items are shifted by a few pixels.. go figure */
  /*padding: 0.1em 0.3em 0.2em 0.3em;*/
  /*margin: 0em 0em 0em 1.5em;*/
  }
  /* Checkbox preceeding menu items (Options, ) */
  #MainMenu QMenu::indicator {
    width: 1em;
    height: 1em;
    /* The indicator is by default aligned with the text
      = overlaps first few characters.
      > margin-left needs to be negative to push it left.
      margin-right = space QMenu::item text <> shortcut wtf... */
    /* padding = icon border <> fixed-size image
      = expands the 'background' area
      = padding-top/bottom:
       * adjust to cover the row height so the indicator looks like
         part of the text item
       * clipped by item height
      = padding- left: adjust to equalize the painted bg surrounding the image. */
  }
  #MainMenu QMenu::indicator,
  #MainMenu QMenu::indicator:selected,
  #MainMenu QMenu::indicator:checked,
  #MainMenu QMenu::indicator:checked:selected {
    /* checkbox is a SVG with optional checkmark.
      In all other menus border(css) and checkmark(SVG) are separate
      which allows to combine them in a flexible way for many states
      (like indeterminate, checked:selected, checked:!enabled)

      Here we need to work around certain 'rendering issues' on
      multiple target OS, and we only need
      * checked
      * unchecked
      * checked:selected
      * unchecked:selected
      so we can use graphics only, which in return gives somewhat
      identical appearance on both Wind'ohs and Linux  */
  }
  #MainMenu QMenu::separator {
    height: 0px;
    margin: 0.25em;
  }
  #MainMenu QMenu::right-arrow {
    width: 0.7em;
    height: 0.7em;
  }





  WEffectSelector QAbstractScrollArea {
    /* This would set the maximum width only. The minimum seems to be
      defined by the widget itself. */
    /* TODO(ronso0)
      Unfortunately, text elide (center) is calculated from the widget's
      width, not from the width set here... */
    min-width: 160px;
  }
  #fadeModeCombobox QAbstractScrollArea {
    min-width: 185px;
  }
  WEffectSelector::indicator:checked,
  #fadeModeCombobox::indicator:checked {
    margin: 2px;
  }
  WEffectSelector::down-arrow,
  #fadeModeCombobox::down-arrow {
    border: 0;
    padding: 0;
    margin: 0;
  }

  WEffectSelector::checked, /* selected item */
  WEffectSelector::indicator, /* checkbox, tick mark */
  WEffectSelector::drop-down,
  WEffectSelector::indicator:unchecked,
  #fadeModeCombobox::checked, /* selected mode */
  #fadeModeCombobox::indicator, /* checkbox, tick mark */
  #fadeModeCombobox::drop-down,
  #fadeModeCombobox::indicator:unchecked,
  /* Don't use #LibraryContainer QMenu::item, that would catch
    ALL menus incl.WTrackMenu in the table, search menu,
    sidebar menu, table header menu, cover art menu.
    And for some reason the item properties set here can not be
    overwritten with WSearchLineEdit QMenu::item below. */
  WLibrarySidebar QMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item,
  WTrackMenu QMenu QCheckBox,
  WBeatSpinBox QMenu::item,
  WCueMenuPopup QMenu::item,
  WCoverArtMenu::item {
    padding: 0px;
    margin: 0px;
    image: none;
    outline: none;
    border: 0px solid transparent;
    }

  WLibrarySidebar QMenu::separator,
  WTrackMenu::separator,
  WTrackMenu QMenu::separator,
  QLineEdit QMenu::separator,
  QTextBrowser QMenu::separator {
    height: 0px;
    margin: 4px;
  }

  WLibrarySidebar QMenu::item,
  WLibrary QHeaderView QMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item {
  /* padding-right reserves space for the submenu expand arrow
    padding-left should be bigger than the menu icon width +
    icon margin-left/-right */
    padding: 5px 12px 5px 26px;
  }
  /* This catches context menus of
    - property cells in the tracks table
    - WCueMenuPopup cue label editor
    - WBeatSpinBox
    - AutoDJ transition QSpinBox*/
  QLineEdit QMenu::item,
  WCoverArtMenu::item,
  /* for the sake of completeness: html root view of Crates, Rec etc. */
  QTextBrowser QMenu::item {
    padding: 5px 12px 5px 12px;
  }
  /* Icons in those menus (copy, paste, cut, delete) */
  #LibraryContainer QMenu::icon,
  QLineEdit QMenu::icon,
  /* - checkbox in Crate name context menu
        "[ ] Auto DJ Track Source"
     - QHeaderView QMenu::indicator */
  #LibraryContainer QMenu::indicator {
    /* Linux: margin-right pushes the entire icon to the right !?? */
    margin: 0px 4px 0px 5px;
    }
  /* items in Crate sub menu */
  #LibraryContainer QMenu QCheckBox,
  WTrackMenu QMenu QCheckBox {
    padding: 3px 10px 3px 5px;
    }

  #MainMenu QMenu::right-arrow,
  #LibraryContainer QMenu::right-arrow,
  WTrackMenu::right-arrow,
  WTrackMenu QMenu::right-arrow,
  #LibraryContainer QTableView::indicator {
    width: 10px;
    height: 10px;
    }
  #LibraryContainer QMenu QCheckBox::indicator,
  #LibraryContainer QMenu::indicator,
  WTrackMenu QMenu QCheckBox::indicator,
  WTrackMenu QMenu::indicator,
  WCueMenuPopup QMenu::indicator {
    width: 13px;
    height: 13px;
    border: 1px solid #333;
    border-radius: 1px;
    background-color: #000;
    /* remove OS focus indicator */
    outline: none;
    }

/************** font sizes / alignment ****************************************/

#KnobLabel,
#FxKnobLabel,
#FxButtonLabel,
#RateRangeText,
#LatencyLabel {
  font-size: 10px;
  text-align: center;
}

WPushButton,
#LibraryFeatureControls QPushButton,
#RecDuration[highlight="0"],
#RecDuration[highlight="1"] {
  font-size: 11px;
}

#RateRangePrefix,
#RecDuration[highlight="2"],
#SamplerTitleMini,
#EQKillButton,
#RateText,
#SamplerBpmMini,
#PreviewBPM,
#LibraryFeatureControls QRadioButton {
	font-size: 12px;
}

WKey,
#DurationText,
WEffectSelector,
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox,
#fadeModeCombobox QAbstractScrollArea,
#LibraryFeatureControls QLabel,
#SkinSettingsButton,
#SkinSettingsNumToggle,
#SkinSettingsMixerToggle,
#SkinSettingsText {
  font-size: 13px;
}

#PlayPositionTextSmall,
#SamplerTitleMini, #SamplerBpm,
#MicAuxLabel, #MicAuxLabelUnconfigured,
#PreviewTitle,
#PreviewLabel,
WBeatSpinBox,
#spinBoxTransition {
  font-size: 14px;
}

#TitleTextSmall,
#ArtistTextSmall,
#PlayPositionText,
#BpmText,
#BpmTextSmall,
#FxUnitLabel,
#SamplerTitle,
WTime,
WRecordingDuration {
  font-size: 16px;
}

#SkinSettingsLabelButton,
#CategoryLabel,
#SkinSettingsNumToggleHeader  {
  font-size: 17px;
}

#ArtistText,
#TitleText {
  font-size: 18px;
}

#PlayPositionTextSmall,
#SamplerTitle,
#SamplerTitleMini,
#MicAuxLabel,
#MicAuxLabelUnconfigured,
#PreviewTitle,
#PreviewLabel {
  text-align: left;
}

#RateText,
#MicAuxLabel,
#PreviewBPM {
  text-align: center;
  }
  WBeatSpinBox,
  #spinBoxTransition {
    qproperty-alignment: 'AlignHCenter';
  }

#SamplerBpm,
#SamplerBpmMini {
  text-align: right;
}

#KnobLabel,
#FxKnobLabel,
#FxButtonLabel {
  qproperty-alignment: 'AlignLeft | AlignVCenter';
}


#LibraryContainer QHeaderView::item {
  /* not applied: */
  /* BROKEN
  use relative font size, adjusts with OS font size */
  font-size: 1em;
  line-height: 1.2em;
  border-bottom: 1px solid #000;
  }
  #LibraryContainer QHeaderView::section {
    height: 1.2em;
    border: 0px;
    padding: 0px 2px;
  }
  #LibraryContainer QHeaderView::up-arrow,
  #LibraryContainer QHeaderView::down-arrow {
    width: 0.8em;
    padding: 0px 3px;
    }


/* This does NOT style the cue labels in the overview
WOverview {
  font-size: 20px;
}
  To style the overview cue labels use this
  <LabelFontSize>
  <LabelTextColor>
  <LabelBackgroundColor>
  in deck_overview.xml instead.
  See https://github.com/mixxxdj/mixxx/pull/2238/files#diff-63372b146329ec67669d336bc0decfdaR100  */
/* Those styles affect the labels in the overview cue menu and its child dialogs.
WOverview QLabel {
  font-weight: bold;
  font-size: 12px;
  background-color: blue;
} */
/************** font sizes / alignment ****************************************/
/************** font settings *************************************************/






/*********** layout margins & paddings of individual sections ******************
*******************************************************************************/

/************** ToolBar *******************************************************/
#ToolBar {
  }
  #ToolBar, #ToolBarSection {
    qproperty-layoutAlignment: 'AlignLeft | AlignVCenter';
  }
  #RecBox {
    qproperty-layoutAlignment: 'AlignCenter';
    }
  #ClockWidget {
    qproperty-layoutAlignment: 'AlignVCenter | AlignHCenter';
    }
  #LatencyLabel {
  }
/************** ToolBar *******************************************************/



/************** Decks *********************************************************/

#DeckRows12345 {
  }

#DeckRow_1_KeyVinylFx {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #VinylControls {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #VinylStatus {
    border-radius: 5px;
  }
  #KeyText, #KeyTextSmall {
    qproperty-alignment: 'AlignCenter';
  }

#DeckRow_2_3_ArtistTitleTime {
  }
  #TitleRow {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  }
 #TrackColorFullCompact {
    padding: 0px 3px 0px 5px;
  }
  #TrackColorMini {
    padding: 0px 0px 0px 5px;
  }

#DeckSettings {
  qproperty-layoutAlignment: 'AlignCenter';
  }
  #Stars {
    qproperty-layoutAlignment: 'AlignCenter';
  }

#DeckRow_5_LoopCuesTransport {
  qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  }
  #DeckRow_5_LoopCuesTransportCompact {
    qproperty-layoutAlignment: 'AlignLeft';
  }

  #LoopControls,
  #JumpControls {
    qproperty-layoutAlignment: 'AlignCenter';
  }

WSpinny { /*
  This produces artifacts in spinny bg
  background-color: rgba(1, 1, 1, 10);
  This makes no difference, the spinny loads some default grey bg
  background: none;*/
}

#BpmText,
#RateText,
#RateRangePrefix,
#RateRangeText {
  qproperty-alignment: 'AlignCenter';
}

#RateContainer,
#RateContainerCompact,
#BpmContainer,
#RateButtons
#SyncBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#RateControls {
  qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
}
/************** Decks  ********************************************************/



/************** Mixer  ********************************************************/
#MixerContainer {
  qproperty-layoutAlignment: 'AlignTop';
}

#MixerDecks {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #MixerChannel_2Decks {
    qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
  }

  #MixerChannel_4Decks {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  }

  #MixerChannel_2Decks_Left {
    qproperty-layoutAlignment: 'AlignRight | AlignBottom';
  }

  #MixerChannel_2Decks_Right {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  }

  #VolumeGain2Decks {
    qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  }
  #VuAndSlider_4Decks {
    qproperty-layoutAlignment: 'AlignRight | AlignTop';
  }

  #KnobCentered {
    qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  }

#VuMeterBox,
#VuMeterBoxMasterSingle {
  /* gap in between clipping and Vu level */
  qproperty-layoutSpacing: 2;
}
#VuMeterBox,
#VuMeterBoxMaster,
#LatencyMeterBox {
  /* (black) groove around Vu widgets */
  padding: 1px;
}
#VuMeterBoxMaster {
  /* gap in between Master lft/right Vu
  qproperty-layoutSpacing: 1; */
  }
  #VuMeterBoxFull {
    /* push all VU meters to the right to visullay center it
      below Pfl buttons */
    margin-left: 1px;
  }
  #VuMeterChannel_2Decks,
  #VuMeterChannel_4Decks,
  #VuMeterMaster_2Decks,
  #VuMeterMaster_4Decks {
    qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
    }

#CrossfaderAndSwitches2Decks {
  qproperty-layoutAlignment: 'AlignHCenter';
}
#CrossfaderSwitch_4Decks {
  qproperty-layoutAlignment: 'AlignRight';
  }
  #CrossfaderContainer {
    qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
    }
    #Crossfader {
      qproperty-layoutAlignment: 'AlignCenter';
    }

#MixerMasterHeadphone {
  }
  #MasterControls,
  #HeadphoneControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    }
    #BoothLabelBox {
      qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
    }
  #MasterHeadphoneSeparator {
  }

/************** Mixer  ********************************************************/



/************** Effects ******************************************************/
#FxRack {
  qproperty-layoutAlignment: 'AlignCenter | AlignTop';
}

#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4 {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}

#FxUnitHeaderCollapsed,
#FxUnitHeaderExpanded,
#FxUnitHeader {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}
#FxUnitControlsExpanded, #FxUnitControlsCollapsed {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
}

#FxSlot1,
#FxSlot2,
#FxSlot3 {
  qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
  }

#FxFocusButtonBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
}

#FxMetaKnob {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
}

#FxParameterKnobBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#FxParameterKnob {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  margin-left: 1px;
}

#FxParameterButtonBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

WEffectSelector {
  /* Fixes the white bars on the top/bottom of the popup on Mac OS X */
  min-height: 13px;
  margin: 1px 0px 0px 0px;
  /* If you use margin top/bottom 0, the combo box shrinks in width (go figure) and
      names start getting cut off. Adding explicit padding improves this. */
  padding: 4px 0px 4px 4px;
  /* The 3D frame on the combo box becomes flat when you give it a border
  border-radius: 3px; */
  }
#fadeModeCombobox {
  height: 18px;
  margin: 0px 0px 3px 1px;
  padding: 1px 0px 1px 4px;
  }

  WEffectSelector QAbstractScrollArea,
  #fadeModeCombobox QAbstractScrollArea {
    border: 1px solid #444;
    border-radius: 2px;
    padding: 0px;
    margin: 0px;
  }
  /* selected item */
  WEffectSelector:checked,
  #fadeModeCombobox:checked {
    /* not applied
    padding-left: 5px;	*/
    padding: 0px;
    margin: 0px;
    color: #eee;
  }
  /* hovered items */
  WEffectSelector::item:selected,
  #fadeModeCombobox::item:selected {
    background-color: #333;
  /* Already one of those properties destroys font config and
     puts tick mark behind text:
    margin: 0px;
    padding: 0px; */
  /* This moves the tick mark behind item text,
    text sits at left border now
    border: 0; */
  }
  WEffectSelector::indicator,
  #fadeModeCombobox::indicator {
  /* This is sufficient to completely hide the tick mark, but
    this alone would show an empty, shadowed box instead of tick mark
    background-color: transparent;*/
  /* This should decrease the tick mark's left & right margin but is not respected
    margin: 0px;
    padding: 0px;*/
  }
/************** Effects *******************************************************/



/************** Samplers ******************************************************/
#SamplerRow {
  qproperty-layoutAlignment: 'AlignTop';
}
#SamplerExpandBox {
  qproperty-layoutAlignment: 'AlignTop | AlignHCenter';
  }
  #SamplerExpand {
  }
    #SamplerTitleBox {
      qproperty-layoutAlignment: 'AlignLeft | AlignTop';
      }

    #SamplerSettings {
      qproperty-layoutAlignment: 'AlignVCenter';
    }
    #SamplerBPMSettingsMini,
    #SamplerSettingsMini {
      qproperty-layoutAlignment: 'AlignRight';
    }

    #SamplerHotcues,
    #SamplerPfl {
      qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
    }

    #SamplerPfl {
      qproperty-layoutAlignment: 'AlignRight | AlignBottom';
    }

    #SamplerVU {
      qproperty-layoutAlignment: 'AlignCenter';
    }

    #SamplerPitchSlider {
      qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
    }

/************** Samplers *****************************************************/



/************** Mic Aux *******************************************************/

#MicDuckingContainer {
  qproperty-layoutAlignment: 'AlignCenter | AlignTop';
  }
  #MicDuckingStrengthBox {
    qproperty-layoutAlignment: 'AlignHCenter';
  }

#MicAuxUnit {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  }
    #MicAuxLabel {
      qproperty-alignment: 'AlignCenter | AlignTop';
    }
    #AuxPlayBox {
      qproperty-layoutAlignment: 'AlignCenter | AlignBottom';
    }
    #MicTalkBox {
      qproperty-layoutAlignment: 'AlignCenter | AlignBottom';
    }
    #MicAuxVUMeter {
      qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    }
    #MicAuxAddBox {
      qproperty-layoutAlignment: 'AlignCenter | AlignBottom';
    }

  #MicAuxSubControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    }
    #MicAuxGainPFlContainer {
      }
      #MicAuxGainKnob {
        qproperty-layoutAlignment: 'AlignCenter';
      }
    #MicAuxFxButtons {
      qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    }

/************** Mic Aux *******************************************************/



/************** Skin setttings ************************************************/

#SkinSettings {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #SkinSettingsCategory {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #DeckSizeToggleContainer {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }





/************** PreviewDeck ***************************************************/
#PreviewDeck {
  qproperty-layoutAlignment: 'AlignTop';
}

#PreviewTitleEjectRow {
  }
  #PreviewDeckTextBox {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
    }
    #PreviewLabel { /* Placeholder */
      qproperty-alignment: 'AlignVCenter | AlignLeft';
    }
/************** PreviewDeck ***************************************************/
/*********** layout margins & paddings of individual sections ******************
*******************************************************************************/



/************** Library *******************************************************/

#LibrarySingleton {
  /* This doesn't work as expected:
  it appears LibrarySingleton is displayed twice (nested in itself),
  so padding/margin would double.
  Placed a plain spacer in library.xml which works reliably
  padding-top: 5px;*/
}


#SearchLineBox {
  padding: 2px 0px 2px 2px;
  border-right: 0px;
  border-top-right-radius: 0px;
  border-top-left-radius: 0px;
  }
  #LibExpandBox {
    qproperty-layoutAlignment: 'AlignTop | AlignHCenter';
  }

/************ Library feature controls / tree view / table view *************/
/* Extra declaration for QRadioButton otherwise it shows up with wrong colors in Linux with Gnome */

/* Library feature pushbuttons
  Don't use 'WLibrary QPushButton' here, as this would apply padding
  to the Preview & BPM lock buttons as well.
  Define the buttons fore every Library feature instead. */
#LibraryFeatureControls QPushButton {
  margin: 0px 2px 3px 0px;
  padding: 0px 5px;
  /* Note: border-width is added, so the effective minimal size
    is 24 x 36 px */
  height: 20px;
  min-width: 32px;
  }
  #DlgAutoDJ #LibraryFeatureControls QPushButton {
    padding: 0px;
    }
    QPushButton#pushButtonAutoDJ {
      min-width: 40px;
    }

#LibraryFeatureControls QLabel,
#LibraryFeatureControls QRadioButton {
  background: transparent;
}

/* Additional space for QRadionButtons */
#LibraryFeatureControls QRadioButton {
  margin: 2px 3px 2px 3px;
  }
  /* Push 'New' radio button away from corner */
  QRadioButton#radioButtonRecentlyAdded {
    margin-left: 5px;
  }
  /* Space in between 'All' radio button and 'Select All' button */
  QRadioButton#radioButtonAllSongs {
    margin-right: 10px;
  }

/* Additional space for QLabels */
QLabel#labelTransitionAppendix {
  margin-left: 3px;
}
QLabel#labelProgress, /* Analysis progress */
QLabel#labelSelectionInfo /* AutoDJ track selection info */ {
  margin: 2px 5px 5px 1px;
}
QLabel#labelRecPrefix,
QLabel#labelRecFilename,
QLabel#labelRecStatistics {
  text-transform: none;
  margin: 3px 0px 3px 0px;
}

#LibraryContainer QTreeView {
  show-decoration-selected: 0;
}
/************** Library *******************************************************/



/************** little helpers ************************************************/
#AlignLeft {
  qproperty-layoutAlignment: 'AlignLeft';
}

#AlignLeftTop {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
}

#AlignLeftBottom {
  qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
}

#AlignRight {
  qproperty-layoutAlignment: 'AlignRight';
}

#AlignRightTop {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}

#AlignRightBottom {
  qproperty-layoutAlignment: 'AlignRight | AlignBottom';
}

#AlignRightCenter {
  qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
}

#AlignCenter {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
}

#AlignCenterTop {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#AlignTop {
  qproperty-layoutAlignment: 'AlignTop';
}

#AlignBottom {
  qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
}

#TEST {
  background-color: #456113;
}

#TEST1 {
  background-color: #456113;
}

#TEST2 {
  background-color: #561134;
}

#TEST3 {
  background-color: #451361;
}

#TEST4 {
  background-color: #134561;
}

#TEST33 {
  background-color: #333;
}

#TEST66 {
  background-color: #666;
}

#TEST99 {
  background-color: #999;
}

#SET_FULL_MIXER {
  background-color: #ff0000;
  }

#SET_FULL {
  background-color: #cc0000;
  }
  #IS_FULL {
    background-color: #990000;
  }

#SET_COMPACT {
  background-color: #00cc00;
  }
  #IS_COMPACT {
    background-color: #009900;
  }

#SET_MINI {
  background-color: #0000cc;
  }
  #IS_MINI {
    background-color: #000099;
  }

#Spacer00 {
  background-color: #000;
}

#Spacer0f {
  background-color: #0f0f0f;
}

#Spacer1e {
  background-color: #1e1e1e;
}

#Spacer58 {
  background-color: #585858;
}

#Border58 {
  border: 1px solid #585858;
}

/* Spacing between treeview and searchbar */
QListView { margin: 10px 0px 0px 0px; }
QListView:focus { border: 1px solid #8E5C00; }

/* triangle for closed/opened branches in treeview */
QListView { show-decoration-selected: 0; background-color: #151515; } /*  Suppresses that selected sidebar items branch indicator shows wrong color when out of focus ; lp:880588 */
QListView::branch:has-children:!has-siblings:closed,
QListView::branch:closed:has-children:has-siblings { border-image: none; image: url(skin:/style/style_branch_closed.png);
  background-color:#0f0f0f;
}
QListView::branch:open:has-children:!has-siblings,
QListView::branch:open:has-children:has-siblings { border-image: none; image: url(skin:/style/style_branch_open.png);
  background-color:#0f0f0f;
}
QListView::branch:has-children:!has-siblings:closed:selected,
QListView::branch:closed:has-children:has-siblings:selected { border-image: none; image: url(skin:/style/style_branch_closed.png);
  background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #585858, stop:1 #0f0f0f);
}
QListView::branch:open:has-children:!has-siblings:selected,
QListView::branch:open:has-children:has-siblings:selected { border-image: none; image: url(skin:/style/style_branch_open.png);
  background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #585858, stop:1 #0f0f0f);
}
