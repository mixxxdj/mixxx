/* LateNight 2.3 */

/************** font settings *************************************************/
#Mixxx, WWidget,
WEffect, WEffectSelector,
WKey,
WLabel, WLibrary QLabel,
WNumber,
WNumberPos,
WPushButton, WLibrary QPushButton,
WRecordingDuration,
WTime,
WTrackText,
WTrackProperty,
WBeatSpinBox,
QSpinBox,
QComboBox,
WLibrary QHeaderView,
QToolTip,
#LibraryContainer QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu,
WOverview /* Hotcue labels in the overview */ {
  font-family: "Open Sans";
  text-transform: uppercase;
  font-weight: bold;
  font-style: normal;
}

/* regular font weight */
QToolTip,
#LibraryContainer QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu,
WBeatSpinBox QMenu {
  font-weight: normal;
}

/* regular case / no text transformation */
WKey,
WOverview,
WTrackProperty, WTrackText,
QToolTip,
#LibraryContainer QMenu,
#LibraryContainer QMenu QCheckBox,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WBeatSpinBox QMenu,
WTrackMenu,
WTrackMenu QCheckBox,
WTrackMenu QMenu,
WTrackMenu QMenu QCheckBox,
WLibrary QHeaderView {
  text-transform: none;
}

/************** font sizes / alignment ****************************************/
WPushButton, WLibrary QPushButton,
#RecDuration[highlight="0"],
#RecDuration[highlight="1"] {
  font-size: 11px/12px;
}
#RecDuration[highlight="2"] {
	font-size: 12px/12px;
}

#KnobLabel,
#FxKnobLabel,
#FxButtonLabel,
#LatencyLabel {
  font-size: 10px;
  text-align: center;
}
#EQKillButton {
  font-size: 12px;
}

#ArtistText,
#TitleText,
#BpmText {
  font-size: 18px;
  }
  #ArtistText,
  #TitleText {
    text-align: left;
  }
  #BpmText {
    text-align: center;
  }

#SkinSettingsLabelButton,
#CategoryLabel  {
  font-size: 17px;
  text-align: left;
}

#TitleTextSmall,
#ArtistTextSmall,
#PlayPositionText,
#PlayPositionTextSmall,
#BpmTextSmall,
#FxUnitLabel,
#SamplerTitle {
	font-size: 16px;
}

#SamplerTitleSmall,
#MicAuxSubTitle,
#PreviewTitle,
#PreviewLabel,
WTime {
  font-size: 14px;
  text-align: left;
}

WKey,
#DurationText,
WBeatSpinBox,
#spinBoxTransition,
WLibrary QHeaderView {
  font-size: 13px;
}

#RateText,
#PreviewBPM,
WEffectSelector,
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox,
#fadeModeCombobox QAbstractScrollArea {
  font-size: 12px;
  }
  #RateText,
  #MicAuxSubTitle,
  #PreviewBPM {
    text-align: center;
  }

#SamplerTitle {
  text-align: left;
}
#SamplerTitleSmall {
  text-align: left;
}


/* This does NOT style the cue labels in the overview
WOverview {
  font-size: 20px;
}
  To style the overview cue labels use this
  <LabelFontSize>
  <LabelTextColor>
  <LabelBackgroundColor>
  in deck_overview.xml instead.
  See https://github.com/mixxxdj/mixxx/pull/2238/files#diff-63372b146329ec67669d336bc0decfdaR100  */
/* Those styles affect the labels in the overview cue menu and its child dialogs.
WOverview QLabel {
  font-weight: bold;
  font-size: 12px;
  color: green;
  background-color: blue;
} */
/************** font sizes / alignment ****************************************/



/************** font colors **************************************************/
#VinylButton[displayValue="0"],
#VinylTristateButton,
#FxAssignButtonDeck[displayValue="0"],
#GuiToggleButton[displayValue="0"],
#BroadcastButton[displayValue="0"],
#SettingsButton[displayValue="0"],
#RecDuration[highlight="0"],
#RecDuration[highlight="1"] {
  color: #bfbfbf;
  }
  #RecDuration[highlight="2"] {
    color: #d2d2d2;
  }

#VinylButton[displayValue="1"],
#VinylButton[displayValue="2"],
#FxAssignButtonDeck[displayValue="1"],
#GuiToggleButton[displayValue="1"],
#GuiToggleButton[displayValue="2"],
#BroadcastButton[displayValue="1"], /* connecting: yellow */
#SettingsButton[displayValue="1"] {
  color: #000;
}

#EQKillButton[displayValue="0"] {
  color: #666;
}
#KeyButton[displayValue="1"] {
  color: #d2d2d2;
}

/* yellow */
#Deck1 WLabel, #Deck2 WLabel,
#DeckMini1 WLabel, #DeckMini2 WLabel,
#Deck1 WBeatSpinBox, #Deck2 WBeatSpinBox, #spinBoxTransition,
#Deck1 WStarRating, #Deck2 WStarRating,
#SamplerTitle, #SamplerTitleSmall, #SamplerBpm,
#FxUnitLabel, #MicAuxSubTitle,
WEffectSelector, WEffectSelector QAbstractScrollArea,
#PreviewLabel, #PreviewDeckText, #PreviewTitle, #PreviewBPM,
#fadeModeCombobox, #fadeModeCombobox QAbstractScrollArea,
#CategoryLabel, #SkinSettingsLabelButton,
WSearchLineEdit,
#LibraryBPMSpinBox,
#LibraryBPMButton::item,
#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView,
WLibrary QLabel, WLibrary QRadioButton,
WLibrary QTableView::indicator,
QToolTip,
WBeatSpinBox QMenu,
#LibraryContainer QMenu,
#LibraryContainer QMenu QCheckBox,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCueMenuPopup QLabel,
#CueLabelEdit,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QCheckBox,
WTrackMenu QMenu,
WTrackMenu QMenu QCheckBox,
#LatencyLabel, WTime {
  color: #f0bb2b;
  }
  WSearchLineEdit,
  #LibraryBPMSpinBox,
  #LibraryBPMButton::item,
  #LibraryContainer QTableView,
  #LibraryContainer QTextBrowser,
  #LibraryContainer QTreeView {
    selection-color: #f0bb2b;
  }

/* light blue */
#Deck3 WLabel, #Deck4 WLabel,
#DeckMini3 WLabel, #DeckMini4 WLabel,
#Deck3 WStarRating, #Deck4 WStarRating,
#Deck3 WBeatSpinBox, #Deck4 WBeatSpinBox {
  color: #0bd9d1;
}

#KnobLabel,
#FxKnobLabel,
#FxButtonLabel {
  color: #666;
  qproperty-alignment: 'AlignCenter | AlignBottom';
  padding-top: -1px;
}

#MasterHeadphoneMixer WLabel,
#FxKnobLabel,
#FxButtonLabel {
  padding: 0px;
  background-color: #101010;
  }
  #FxKnobLabel,
  #FxButtonLabel {
    qproperty-alignment: 'AlignLeft | AlignVCenter';
    }

/* Passthrough label on overview waveform */
WOverview #PassthroughLabel {
  font-weight: bold;
  color: #d09300;
}

/************** font colors **************************************************/
/************** font settings *************************************************/



/************** Backgrounds, 3D borders & margins *****************************
************** of major GUI containers **************************************/

#debugbg {
    background-color: #fff;
}

#SkinContainer {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#Deck1, #DeckMini1, #Deck2, #DeckMini2,
  #Deck3, #DeckMini3, #Deck4, #DeckMini4,
  #DeckRow_1_KeyVinylFx,
  #DeckRow_2_3_ArtistTitleTime,
  #DeckRow_4_OverviewSpinny,
#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4,
  #FxUnitControlsExpanded, #FxUnitControlsCollapsed,
  #FxSlotsExpanded, #FxSlotsCollapsed, #FxSlotContainer,
#MixerContainer, #MasterHeadphoneSeparator,
#MicRack, #AuxRack, #MicAuxMainControls,
#SamplerDeck, #SamplerDeckMini, #SamplerExpandButtonBox,
  #SamplerDeckMini, #SamplerText, #SamplerRowTwo, #SamplerPfl,
WEffectSelector::checked, #fadeModeCombobox::checked,
#ToolBar, #WaveformsContainer,
WLibrary,
#SidebarBox,
#PreviewDeck,
#SearchLineBox,
QAbstractScrollArea::corner {
  background-color: #1e1e1e;
}

/* borders of elevated containers */
#WaveformsContainer,
#Deck1, #DeckMini1, #Deck2, #DeckMini2,
#Deck3, #DeckMini3, #Deck4, #DeckMini4,
#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4,
#MixerContainer,
#MicRack, #AuxRack, #MicAuxMainControls,
#SamplerDeck, #SamplerDeckMini, #SamplerExpandButtonBox,
WLibrary, #SidebarBox, #SearchLineBox, #PreviewDeck {
  border-top: 1px solid #333;
  border-left: 1px solid #333;
  border-bottom: 1px solid #0a0a0a;
  border-right: 1px solid #0a0a0a;
  border-radius: 2px;
}
#WaveformsBottomBorder, #WaveformsRightBorder {
  background-color: #333;
}
#WaveformsBottomBorder {
  padding-top: 1px;
}
#WaveformsContainer {
  padding: 0px 0px 1px 0px;
}
#WaveformsContainer[highlight="0"] {
  padding: 0px 0px 1px 0px;
  border-width: 0px 0px 1px 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
}
#WaveformsContainer[highlight="1"] {
  /* the right border is necessary only when the skin settings menu is visible */
  border-width: 0px 1px 1px 0px;
}


/* borders of embedded regions like deck buttons & Master mixer */
#DeckRow_5_LoopCuesTransport,
#MasterControls, #HeadphoneControls,
#FxSlotBorder1[highlight="0"],
#FxSlotBorder2[highlight="0"],
#FxSlotBorder3[highlight="0"],
#SamplerHotcues,
#MicAuxMainControlsFrame, #MicAuxSubControlsFrame,
WSearchLineEdit,
#OverviewBox,
#KeyText {
  border-top: 1px solid #0a0a0a;
  border-left: 1px solid #0a0a0a;
  border-bottom: 1px solid #333;
  border-right: 1px solid #333;
  border-bottom-left-radius: 1px;
  border-top-right-radius: 1px; /*
  any color would cover the background texture
  background-color: #131313;  */
}
/* In conjunction with
    <ConfigKey><Variable name="group"/>,visual_key</ConfigKey>
    <Transform><Not><Variable name="group"/>,file_key</Not></Transform>
    <BindProperty>highlight</BindProperty>
  this is uspposed to highlight a not-original key, but it doesn't work.
#KeyText[highlight="1"] {
  margin-top: 1px;
  border: 1px solid #F856E7;
} */

/************ separator lines within decks, samplers etc. *********************/
#DeckRow_1_KeyVinylFx, #ArtistRow, #DeckControlsStars, #DeckRateSeparator,
#BigSpinnyCoverContainer, #SmallSpinnyCoverContainer,
#BpmTextSmall, #KeyTextSmall, #ArtistTextSmall, #PlayPositionTextSmall,
#PlayContainerSmall,
#PreviewLabel, #PreviewPlayBox,
#SamplerText, #SamplerPlay, #SamplerButtonGrid,
#SamplerGain, #SamplerVU, #SamplerPfl {
  border-style: solid;
  border-color: #0c0c0c;
}

/* see
  separator_artist_title.xml and
  separator_spinny_cover
  for visibility conditions */
#SeparatorLine {
  background-color: #0c0c0c;
}

/*********** layout margins & paddings ****************************************/
#Deck1, #Deck2,
#Deck3, #Deck4,
#DeckMini1, #DeckMini2,
#DeckMini3, #DeckMini4,
#FxUnit1, #FxUnit3,
#FxUnit2, #FxUnit4,
#MicRack, #AuxRack {
  margin-bottom: 5px;
}
#MixerContainer {
  margin-bottom: 3px;
}

#Deck1, #Deck2,
#Deck3, #Deck4 {
  padding: 2px 3px 3px 2px;
}
#DeckMini1, #DeckMini2,
#DeckMini3, #DeckMini4 {
  padding: 1px;
}
#DeckMini1, #DeckMini2 {
  margin-top: 5px;
}

#Deck1, #DeckMini1,
#Deck2, #DeckMini2,
#Deck3, #DeckMini3,
#Deck4, #DeckMini4,
#FxUnit1, #FxUnit3,
#FxUnit2, #FxUnit4 {
  margin-right: 3px;
  margin-left: 3px;
}

#MicRack, #AuxRack {
  margin-left: 3px;
  margin-right: 3px;
}
/************** Backgrounds, 3D borders & margins *****************************
************** of major GUI containers **************************************/



/************** Button styles *************************************************
*************** Button borders ************************************************/
QHeaderView,
QHeaderView::section,
QHeaderView::up-arrow,
QHeaderView::down-arrow {
  background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #222,
    stop:1 #111);
}

#KeyMatchButton[displayValue="0"], #KeyDownButton[displayValue="0"],
#VinylButton[displayValue="0"], #VinylTristateButton,
#FxAssignButtonDeck[displayValue="0"],
#GuiToggleButton[displayValue="0"],
#RecFeedback[displayValue="0"],
#BroadcastButton[displayValue="0"],
#SettingsButton[displayValue="0"],
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgAutoDJ > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  border-width: 2px;
  border-image: url(skin:buttons_classic/btn_embedded_library.svg) 2 2 2 2;
  }
  #KeyUpButton[displayValue="0"] {
    border-width: 2px 0px 2px 2px;
    border-image: url(skin:buttons_classic/btn_embedded_library.svg) 2 1 2 2;
  }
  #KeyMatchButton[displayValue="1"], #KeyDownButton[displayValue="1"],
  #VinylButton[displayValue="1"], #VinylButton[displayValue="2"],
  #FxAssignButtonDeck[displayValue="1"],
  #GuiToggleButton[displayValue="1"],
  #RecFeedback[displayValue="1"], #RecFeedback[displayValue="2"],
  #BroadcastButton[displayValue="1"], #BroadcastButton[displayValue="2"],
  #BroadcastButton[displayValue="3"],
  #SettingsButton[displayValue="1"],
  QPushButton#pushButtonAutoDJ:checked,
  QPushButton#pushButtonRepeatPlaylist:checked,
  #DlgAnalysis > QPushButton:checked,
  QPushButton#pushButtonRecording:checked {
    border-width: 2px;
    border-image: url(skin:buttons_classic/btn_embedded_library_active.svg) 2 2 2 2;
  }
  #KeyUpButton[displayValue="1"] {
    border-width: 2px 0px 2px 2px;
    border-image: url(skin:buttons_classic/btn_embedded_library_active.svg) 2 1 2 2;
  }

#FxSuperLinkButton,
#FxSuperLinkInvertButton {
  border: 1px solid #0a0a0a;
  border-radius: 2px;
}

#BeatgridButtonsToggle {
  border-width: 2px;
  border-image: url(skin:buttons_classic/btn_embedded_library.svg) 2 2 2 2;
  margin: 1px;
}

/* Library controls in AutoDJ etc. */
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgAutoDJ > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  color: #bbb;
  }
  #DlgMissing > QPushButton:focus,
  #DlgHidden > QPushButton:focus,
  #DlgAutoDJ > QPushButton:focus,
  #DlgRecording > QPushButton:focus,
  #DlgAnalysis > QPushButton:focus {
    outline: none;
  }
  #DlgMissing > QPushButton:pressed,
  #DlgHidden > QPushButton:pressed,
  #DlgAutoDJ > QPushButton:pressed,
  #DlgRecording > QPushButton:pressed,
  #DlgAnalysis > QPushButton:pressed {
    border-image: url(skin:buttons_classic/btn_embedded_library_active.svg) 2 2 2 2;
    color: #d2d2d2;
  }
  #DlgMissing > QPushButton:!enabled,
  #DlgHidden > QPushButton:!enabled,
  #DlgAutoDJ > QPushButton:!enabled,
  #DlgRecording > QPushButton:!enabled,
  #DlgAnalysis > QPushButton:!enabled {
    color: #666;
  }
  QPushButton#pushButtonAutoDJ:checked,
  QPushButton#pushButtonRepeatPlaylist:checked,
  #DlgAnalysis > QPushButton:checked,
  QPushButton#pushButtonRecording:checked {
    color: #000;
  }

WEffectSelector,
WEffectSelector:open {
  border-width: 1px 2px 2px 1px;
  }
  WEffectSelector {
    border-image: url(skin:buttons_classic/btn_elevated_fx_selector.svg) 1 2 2 1;
  }
  WEffectSelector:open {
    border-image: url(skin:buttons_classic/btn_elevated_fx_selector_open.svg) 1 2 2 1;
  }

#fadeModeCombobox,
#fadeModeCombobox:open {
  border-width: 2px 2px 2px 2px;
  }
  #fadeModeCombobox {
    border-image: url(skin:buttons_classic/btn_embedded_library.svg) 2 2 2 2;
  }
  #fadeModeCombobox:open {
    border-image: url(skin:buttons_classic/btn_embedded_library_active.svg) 2 2 2 2;
  }

#HotcueButton {
  /* ronso0
  TEST pixel fonts instead of icons
  FAIL basically all characters look blurry with a 100% GUI scale factor of 1oo%

  font-size: tried a lot of integers as well as .5 values
  didn't find the magic number.. it's some unintuitive floating point value
  that aligns font pixels to screen pixels so the fonts look sharp.

  font-family: "Acknowledge TT (BRK)";
  font-family: "Bulky Pixels";
  font-family: "Irresistor";
  font-family: "Visitor TT1 BRK";
  font-family: "Boxy Bold";
  font-family: "Pixel Intv";
  font-size: 13px;
  color: #eee;
  */
}

#RateControls WPushButton, #SyncButton,
#DeckRow_5_LoopCuesTransport WPushButton, #PlayBg,
#PlayContainerSmall WPushButton,
#PflButton, #EQKillButton, #QuickEffectButton,
#PlaySampler, #PlayDeckMini,
#SamplerButtons WPushButton,
#SamplerSyncButton,
#FxUnitControlsExpanded WPushButton, #FxUnitControlsCollapsed  WPushButton,
#FxExpandCollapseButton,
#FxAssignButton, #FxToggleButton, #FxParameterButton, #FxFocusButton,
#SplitCueButton,
#PlayPreview,
#BeatgridButtons WPushButton,
#MicTalk, #PlayAux, #MicAuxAddButton, #MicDuckingButton {
  /* limit background to button surface resulting from SVG backpath.
    border width wouldn't be applied.
    otoh, margin would set in the colored background area and not
    crop the SVG background image set in xml button template.
    border-width:  1px 3px 3px 1px;*/
  /* just to be sure the colored background doesn't overlap the rounded SVG border */
  margin: 1px;
  border-radius: 2px;
}

/************** button background colors **************************************/
/* embedded buttons */
#RateControls WPushButton[value="0"], #SyncButton[value="0"],
#PflButton[value="0"],
#EQKillButton[displayValue="0"],
#QuickEffectButton[displayValue="0"],
#FxUnitControlsCollapsed WPushButton, #FxUnitControlsExpanded WPushButton,
#FxExpandCollapseButton,
#PlaySampler[displayValue="0"], #PlayDeckMini[displayValue="0"],
#SamplerSyncButton[displayValue="0"],
#MicTalk[value="0"], #PlayAux[value="0"], #MicAuxAddButton,
#MicDuckingButton[value="0"],
#PlayPreview[displayValue="0"],
QPushButton#pushButtonAutoDJ:enabled:!checked,
#DlgMissing > QPushButton:enabled,
#DlgHidden > QPushButton:enabled,
#DlgAutoDJ > QPushButton:enabled,
#DlgRecording > QPushButton:enabled,
#DlgAnalysis > QPushButton:enabled,
#BeatgridButtonsToggle, #BeatgridButtons WPushButton[displayValue="0"],
#DeckRow_1_KeyVinylFx WPushButton[displayValue="0"],
#VinylTristateButton[displayValue="1"], #VinylTristateButton[displayValue="2"],
#GuiToggleButton[displayValue="0"], #RecFeedback[displayValue="0"],
#BroadcastButton[displayValue="0"], #SettingsButton[displayValue="0"],
#CueDeleteButton {
  background-color: #262626;
}
/* elevated buttons & embedded buttons in top row & toolbar
      brighter bg color to enhance contrast in darker containers
      and with small size respectively */
#DeckRow_5_LoopCuesTransport WPushButton[value="0"], #PlayBg,
#HotcueButton,
#FxAssignButton[displayValue="0"], #FxFocusButton[displayValue="0"],
#FxToggleButton[displayValue="0"], #FxParameterButton[displayValue="0"],
#SplitCueButton[value="0"],
#MicAuxGainPFlContainer WPushButton[displayValue="0"] {
  background-color: #2c2c2c;
}
/* Exception: #PlayDeck is transparent. #PlayIndicator & #PlayBg shine through */
WPushButton#PlayDeck[value="0"],
WPushButton#PlayDeck[value="1"],
WPushButton#PlayDeckMini[value="0"],
WPushButton#PlayDeckMini[value="1"],
WPushButton#PlayIndicator[value="0"] {
  background-color: none;
}

/* Green/Lime Fx-related buttons */
#FxToggleButton[displayValue="1"], #QuickEffectButton[displayValue="1"],
#FxAssignButton[displayValue="1"], #FxAssignButtonDeck[displayValue="1"],
#BroadcastButton[displayValue="2"] {
  background-color: #659f08;
  }
  /* Grey for active Fx parameters and SplitCue */
  QPushButton#pushButtonRepeatPlaylist:checked,
  #FxParameterButton[displayValue="1"],
  #SplitCueButton[value="1"] {
    background-color: #888;
  }

/* Red
  this is also the default hotcue color if
  Auto-Color in Preferences > Decks is Off */
#RateControls WPushButton[value="1"], #SyncButton[value="1"],
/* define red buttons in DeckRow_5_LoopCuesTransport indivually,
because somehow bg color for #SpecialCueButton can't be overwritten */
#LoopControls WPushButton[value="1"], #BeatjumpControls WPushButton[value="1"],
#CueDeck[value="1"], #Reverse[value="1"], #PlayIndicator[displayValue="1"],
#PlayDeckMini[displayValue="1"],
#PlaySampler[displayValue="1"],
#PflButton[value="1"],
#SamplerSyncButton[displayValue="1"],
#EQKillButton[displayValue="1"],
#MicTalk[value="1"], #PlayAux[value="1"],
#MicDuckingButton[value="1"],
#PlayPreview[displayValue="1"],
QPushButton#pushButtonRecording:checked,
#RecFeedback[displayValue="2"],
#BeatgridButtons WPushButton[value="1"],
#KeyMatchButton[displayValue="1"],
#KeyUpButton[displayValue="1"],
#KeyDownButton[displayValue="1"] {
  background-color: #db0000;
}

#BroadcastButton[displayValue="3"] {
  /* pink */
  background-color: #f856e7;
}

/* Orange/yellow */
#VinylButton[displayValue="1"], #VinylButton[displayValue="2"],
#FxFocusButton[displayValue="1"],
#GuiToggleButton[displayValue="1"], #GuiToggleButton[displayValue="2"],
#BroadcastButton[displayValue="1"], /* connecting: yellow */
#RecFeedback[displayValue="1"], /* initialize recording */
#SettingsButton[displayValue="1"],
QPushButton#pushButtonAutoDJ:checked,
#DlgAnalysis > QPushButton:checked,
#MicDuckingButton[value="1"],
#MicDuckingButton[value="2"] {
  background-color: #d09300;
}

#SpecialCueButton[value="1"] {
  background-color: #0044ff;
}


/************** Button icons **************************************************/
#SyncButton {
  image: url(skin:/buttons_classic/btn__sync_deck.svg) no-repeat center center;
  }
  #SamplerSyncButton {
    image: url(skin:/buttons_classic/btn__sync_sampler.svg) no-repeat center center;
  }
  #RatePermUp {
    image: url(skin:/buttons_classic/btn__plus.svg) no-repeat center center;
  }
  #RateTempUp,
  #JumpForward {
    image: url(skin:/buttons_classic/btn__arrow_right.svg) no-repeat center center;
  }
  #RatePermDown {
    image: url(skin:/buttons_classic/btn__minus.svg) no-repeat center center;
  }
  #RateTempDown,
  #JumpBack {
    image: url(skin:/buttons_classic/btn__arrow_left.svg) no-repeat center center;
  }

#LoopActivate {
  image: url(skin:/buttons_classic/btn__loop.svg) no-repeat center center;
  }
  #Reloop {
    image: url(skin:/buttons_classic/btn__reloop.svg) no-repeat center center;
  }
  #LoopIn {
    image: url(skin:/buttons_classic/btn__loop_in.svg) no-repeat center center;
  }
  #LoopOut {
    image: url(skin:/buttons_classic/btn__loop_out.svg) no-repeat center center;
  }

#PflButton {
  image: url(skin:/buttons_classic/btn__pfl.svg) no-repeat center center;
}

#Hotcue1 WPushButton {
  image: url(skin:/buttons_classic/btn__1.svg) no-repeat center center;
  }
  #Hotcue2 WPushButton {
    image: url(skin:/buttons_classic/btn__2.svg) no-repeat center center;
  }
  #Hotcue3 WPushButton {
    image: url(skin:/buttons_classic/btn__3.svg) no-repeat center center;
  }
  #Hotcue4 WPushButton {
    image: url(skin:/buttons_classic/btn__4.svg) no-repeat center center;
  }
  #Hotcue5 WPushButton {
    image: url(skin:/buttons_classic/btn__5.svg) no-repeat center center;
  }
  #Hotcue6 WPushButton {
    image: url(skin:/buttons_classic/btn__6.svg) no-repeat center center;
  }
  #Hotcue7 WPushButton {
    image: url(skin:/buttons_classic/btn__7.svg) no-repeat center center;
  }
  #Hotcue8 WPushButton {
    image: url(skin:/buttons_classic/btn__8.svg) no-repeat center center;
  }

#SpecialCueButton_intro_start WPushButton {
  image: url(skin:/buttons_classic/btn__intro_start.svg) no-repeat center center;
  }
  #SpecialCueButton_intro_end WPushButton {
    image: url(skin:/buttons_classic/btn__intro_end.svg) no-repeat center center;
  }
  #SpecialCueButton_outro_start WPushButton {
    image: url(skin:/buttons_classic/btn__outro_start.svg) no-repeat center center;
  }
  #SpecialCueButton_outro_end WPushButton {
    image: url(skin:/buttons_classic/btn__outro_end.svg) no-repeat center center;
  }

#PlayDeck {
  image: url(skin:/buttons_classic/btn__play_deck.svg) no-repeat center center;
}
#CueDeck {
  image: url(skin:/buttons_classic/btn__cue_deck.svg) no-repeat center center;
}
#Reverse {
  image: url(skin:/buttons_classic/btn__reverse.svg) no-repeat center center;
}

#QuickEffectButton[displayValue="0"] {
  image: url(skin:/buttons_classic/btn__star.svg) no-repeat center center;
}

#FxAssignButton_FX1 WPushButton[value="0"] {
  image: url(skin:/buttons_classic/btn__fx_FX1.svg) no-repeat center center;
    }
    #FxAssignButton_FX1 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_FX1_active.svg) no-repeat center center;
    }
  #FxAssignButton_FX2 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_FX2.svg) no-repeat center center;
    }
    #FxAssignButton_FX2 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_FX2_active.svg) no-repeat center center;
    }
  #FxAssignButton_FX3 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_FX3.svg) no-repeat center center;
    }
    #FxAssignButton_FX3 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_FX3_active.svg) no-repeat center center;
    }
  #FxAssignButton_FX4 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_FX4.svg) no-repeat center center;
    }
    #FxAssignButton_FX4 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_FX4_active.svg) no-repeat center center;
    }
  #FxAssignButton_2 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_2.svg) no-repeat center center;
    }
    #FxAssignButton_2 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_2_active.svg) no-repeat center center;
    }
  #FxAssignButton_3 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_3.svg) no-repeat center center;
    }
    #FxAssignButton_3 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_3_active.svg) no-repeat center center;
    }
  #FxAssignButton_4 WPushButton[value="0"] {
    image: url(skin:/buttons_classic/btn__fx_4.svg) no-repeat center center;
    }
    #FxAssignButton_4 WPushButton[value="1"] {
      image: url(skin:/buttons_classic/btn__fx_4_active.svg) no-repeat center center;
    }

#SplitCueButton[value="0"] {
  image: url(skin:/buttons_classic/btn__splitcue.svg) no-repeat center center;
  }
  #SplitCueButton[value="1"] {
    image: url(skin:/buttons_classic/btn__splitcue_active.svg) no-repeat center center;
  }

#PlaySampler[value="0"],
#PlayDeckMini[value="0"],
#PlayPreview[displayValue="0"] {
  image: url(skin:/buttons_classic/btn__play_sampler.svg) no-repeat center center;
  }
  #PlaySampler[value="1"],
  #PlayDeckMini[value="1"],
  #PlayPreview[displayValue="1"] {
    image: url(skin:/buttons_classic/btn__pause_sampler.svg) no-repeat center center;
  }

#MixModeButton[value="0"] {
  image: url(skin:/buttons_classic/btn__fx_mixmode_d-w.svg) no-repeat center center;
  }
  #MixModeButton[value="1"] {
    image: url(skin:/buttons_classic/btn__fx_mixmode_d+w.svg) no-repeat center center;
  }

#FxExpandCollapseButton[value="0"] {
  image: url(skin:/buttons_classic/btn__fx_sampler_expand.svg) no-repeat center center;
  }
  #FxExpandCollapseButton[value="1"] {
    image: url(skin:/buttons_classic/btn__fx_sampler_collapse.svg) no-repeat center center;
  }

#FxToggleButton[value="0"] {
  image: url(skin:/buttons_classic/btn__fx_toggle.svg) no-repeat center center;
  }
  #FxToggleButton[value="1"] {
    image: url(skin:/buttons_classic/btn__fx_toggle_active.svg) no-repeat center center;
  }

#FxFocusButton[value="0"] {
  image: url(skin:/buttons_classic/btn__fx_focus.svg) no-repeat center center;
  }
  #FxFocusButton[value="1"] {
    image: url(skin:/buttons_classic/btn__fx_focus_active.svg) no-repeat center center;
  }

#KeyMatchButton {
  image: url(skin:/buttons_classic/btn__key_match.svg) no-repeat center center;
  }
#KeyUpButton {
  image: url(skin:/buttons_classic/btn__key_up.svg) no-repeat center center;
  }
#KeyDownButton {
  image: url(skin:/buttons_classic/btn__key_down.svg) no-repeat center center;
  }

/* deck controls for decks 1-4 and samplers */
#CurposButton12[displayValue="0"], #CurposButton34[displayValue="0"] {
  image: url(skin:/buttons_classic/btn__beat_curpos.svg) no-repeat center center;
  }
  #CurposButton12[value="1"] {
    image: url(skin:/buttons_classic/btn__beat_curpos_active_12.svg) no-repeat center center;
  }
  #CurposButton34[value="1"] {
    image: url(skin:/buttons_classic/btn__beat_curpos_active_34.svg) no-repeat center center;
  }

  #EjectButton12[displayValue="0"], #EjectButton34[displayValue="0"] {
    image: url(skin:/buttons_classic/btn__eject.svg) no-repeat center center;
    }
    #EjectButton12[value="1"] {
      image: url(skin:/buttons_classic/btn__eject_active_12.svg) no-repeat center center;
    }
    #EjectButton34[value="1"] {
      image: url(skin:/buttons_classic/btn__eject_active_34.svg) no-repeat center center;
    }

  #RepeatButton12[displayValue="0"], #RepeatButton34[displayValue="0"] {
    image: url(skin:/buttons_classic/btn__repeat.svg) no-repeat center center;
    }
    #RepeatButton12[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__repeat_active_12.svg) no-repeat center center;
    }
    #RepeatButton34[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__repeat_active_34.svg) no-repeat center center;
    }

  #QuantizeButton12[displayValue="0"], #QuantizeButton34[displayValue="0"] {
    image: url(skin:/buttons_classic/btn__quantize.svg) no-repeat center center;
    }
    #QuantizeButton12[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__quantize_active_12.svg) no-repeat center center;
    }
    #QuantizeButton34[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__quantize_active_34.svg) no-repeat center center;
    }

  #SlipmodeButton12[displayValue="0"], #SlipmodeButton34[displayValue="0"] {
    image: url(skin:/buttons_classic/btn__slip.svg) no-repeat center center;
    }
    #SlipmodeButton12[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__slip_active_12.svg) no-repeat center center;
    }
    #SlipmodeButton34[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__slip_active_34.svg) no-repeat center center;
    }

  #KeylockButton12[displayValue="0"], #KeylockButton34[displayValue="0"] {
    image: url(skin:/buttons_classic/btn__keylock.svg) no-repeat center center;
    }
    #KeylockButton12[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__keylock_active_12.svg) no-repeat center center;
    }
    #KeylockButton34[displayValue="1"] {
      image: url(skin:/buttons_classic/btn__keylock_active_34.svg) no-repeat center center;
    }

#BeatgridButtonsToggle {
  border-width: 3px;
  border-image: url(skin:buttons_classic/btn_embedded_library.svg) 3 3 3 3;
  image: url(skin:/buttons_classic/btn__beatgrid_buttons_toggle.svg) no-repeat center center;
  }
  #BeatCurposLarge {
    image: url(skin:/buttons_classic/btn__beat_curpos_large.svg) no-repeat center center;
    }
    #BeatsEarlier {
      image: url(skin:/buttons_classic/btn__beats_earlier.svg) no-repeat center center;
    }
    #BeatsLater {
      image: url(skin:/buttons_classic/btn__beats_later.svg) no-repeat center center;
    }
    #BeatsSlower {
      image: url(skin:/buttons_classic/btn__beats_slower.svg) no-repeat center center;
    }
    #BeatsFaster {
      image: url(skin:/buttons_classic/btn__beats_faster.svg) no-repeat center center;
    }
    #HotcuesEarlier {
      image: url(skin:/buttons_classic/btn__hotcues_earlier.svg) no-repeat center center;
    }
    #HotcuesLater {
      image: url(skin:/buttons_classic/btn__hotcues_later.svg) no-repeat center center;
    }

#MicTalk {
  image: url(skin:/buttons_classic/btn__mic_talk.svg) no-repeat center center;
}
#PlayAux {
  image: url(skin:/buttons_classic/btn__aux_play.svg) no-repeat center center;
}
#MicAuxAddButton {
  image: url(skin:/buttons_classic/btn__plus.svg) no-repeat center center;
}
#MicDuckingButton[value="0"] {
  image: url(skin:/buttons_classic/btn__mic_duck_off.svg) no-repeat center center;
  }
  #MicDuckingButton[value="1"] {
    image: url(skin:/buttons_classic/btn__mic_duck_auto.svg) no-repeat center center;
  }
  #MicDuckingButton[value="2"] {
    image: url(skin:/buttons_classic/btn__mic_duck_manual.svg) no-repeat center center;
  }

#RecDot {
  background: transparent;
  image: url(skin:/buttons_classic/btn__rec_dot.svg) no-repeat center center;
}

#SettingsButton[displayValue="0"] {
  /* for some reason the alignment isn't rescpected, so the icons
    have to be sized like available area (76x16px) */
  image: url(skin:/buttons_classic/btn__settings_off.svg) no-repeat left top;
  }
  #SettingsButton[displayValue="1"] {
    image: url(skin:/buttons_classic/btn__settings_on.svg) no-repeat left top;
  }

#ToolbarLogo {
  image: url(skin:/style_classic/mixxx_logo_small.svg) no-repeat center center;
}

WSearchLineEdit QToolButton:!focus {
  image: url(skin:/buttons_classic/btn__lib_clear_search.svg);
  }
  WSearchLineEdit QToolButton:focus {
    image: url(skin:/buttons_classic/btn__lib_clear_search_focus.svg);
  }

/* AutoDJ button icons */
QPushButton#pushButtonAutoDJ:!checked {
  image: url(skin:/buttons_classic/btn__autodj_enable_off.svg) no-repeat center center;
  }
  QPushButton#pushButtonAutoDJ:checked {
    image: url(skin:/buttons_classic/btn__autodj_enable_on.svg) no-repeat center center;
  }

QPushButton#pushButtonFadeNow:!enabled {
  image: url(skin:/buttons_classic/btn__autodj_fade_disabled.svg) no-repeat center center;
  }
  QPushButton#pushButtonFadeNow:enabled {
    image: url(skin:/buttons_classic/btn__autodj_fade.svg) no-repeat center center;
  }

QPushButton#pushButtonSkipNext:!enabled {
  image: url(skin:/buttons_classic/btn__autodj_skip_disabled.svg) no-repeat center center;
  }
  QPushButton#pushButtonSkipNext:enabled {
    image: url(skin:/buttons_classic/btn__autodj_skip.svg) no-repeat center center;
  }

QPushButton#pushButtonShuffle:enabled {
  image: url(skin:/buttons_classic/btn__autodj_shuffle.svg) no-repeat center center;
}

QPushButton#pushButtonAddRandom:enabled {
  image: url(skin:/buttons_classic/btn__autodj_addrandom.svg) no-repeat center center;
}

QPushButton#pushButtonRepeatPlaylist:!checked {
  image: url(skin:/buttons_classic/btn__autodj_repeat_playlist_off.svg) no-repeat center center;
  }
  QPushButton#pushButtonRepeatPlaylist:checked {
    image: url(skin:/buttons_classic/btn__autodj_repeat_playlist_on.svg) no-repeat center center;
  }
/* AutoDJ button icons */

/* widgets in cue popup menu */
#CueDeleteButton {  /*
  padding: 3px 6px; */
  qproperty-icon: url(skin:/buttons_classic/btn__delete.svg);
  /* color buttons are 42x24 px.
  To get the final size for the Delete button consider border width.
  wide button:
  width: 38px;
  height: 20px;
  tall button, about the same height as cue number + label edit box */
  width: 24px;
  height: 42px;
  border-width: 2px;
  border-image: url(skin:/buttons_classic/btn_embedded_library.svg) 2 2 2 2;
  /* make the icon slightly larger than default 16px */
  qproperty-iconSize: 20px;
  /* has no effect
  padding: 0px; */
}
/*    */
#CueLabelEdit {
  border: 1px solid #f0bb2b;
  border-radius: 0px;
  background-color: #000;
  selection-color: #000;
  selection-background-color: #ccc;
  padding: 2px;
}
/************** Button icons **************************************************/
/************** Button styles *************************************************/



/************** ToolBar *******************************************************/
#ToolBar {
  padding: 1px 0px 2px 2px;
  }
  #ToolBar, #ToolBarSection {
    qproperty-layoutAlignment: 'AlignLeft | AlignVCenter';
    qproperty-layoutSpacing: 2;
  }
  #ToolBarSeparator {
    background: transparent;
    image: url(skin:/style_classic/toolbar_separator.png) no-repeat center center;
    margin: 0px 3px;
  }

  #RecBox {
    qproperty-layoutAlignment: 'AlignCenter';
    }

  #ClockWidget {
    qproperty-layoutAlignment: 'AlignVCenter | AlignHCenter';
    margin-bottom: 2px;
    }

  #LatencyLabel {
    padding-bottom: 2px;
  }
/************** ToolBar *******************************************************/



/************** Decks *********************************************************/
#DeckRow_1_KeyVinylFx {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  /* parent WidgetGroups already set the bg color,
  but without it the top border of #DeckRow_2_3_ArtistTitleTime
  wouldn't show up.... :? */
  padding: 1px 0px 2px 0px;
  border-width: 0px 0px 1px 0px;
  }
  #KeyText {
    qproperty-alignment: 'AlignCenter';
    border-radius: 1px;
    border-left: 0px;
  }
  #KeyTextSmall {
    border-width: 1px 0px 0px 1px;
    padding: 0px 1px 0px 0px;
  }
  #VinylButtons, #FxAssingButtonsDeck {
    qproperty-layoutSpacing: 2;
  }
  #VinylControls {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  }
  #VinylStatus {
    border-radius: 5px;
  }

#DeckRows234 {
}

#BigSpinnyCoverContainer,
#SmallSpinnyCoverContainer {
  border-width: 0px;
  margin-bottom: 1px;
}

#DeckRow_2_3_ArtistTitleTime {
  padding-left: 1px;
  margin: 2px 0px 2px 0xp;
  }
  #TitleRow {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
    padding: 0px;
  }
  #ArtistRow {
    border-width: 1px 0px 0px 0px;
    }
    #ArtistGutter,
    #TitleGutter {
      qproperty-layoutAlignment: 'AlignLeft | AlignVCenter';
      padding: 0px 2px 1px 2px;
      }
      #ArtistText,
      #TitleText {
        /* for some reason the padding/margin is double in the skin...
        margin-left: 1px;
        padding-left: 1px; */
      }
    #PlayPositionGutter, #DurationGutter {
      qproperty-layoutAlignment: 'AlignRight | AlignBottom';
      padding: 0px 2px 1px 2px;
      }
      #PlayPositionText,
      #DurationText {
      }

#DeckRow_4_OverviewSpinny {
  padding: 0px 0px 1px 0px;
}

  #SmallSpinnyCoverContainer {
    border-width: 1px 0px 0px 0px;
  }
  #Stars {
    qproperty-layoutAlignment: 'AlignCenter';
    border-radius: 1px;
    }
  #DeckControlsStars {
    qproperty-layoutAlignment: 'AlignCenter';
    border-width: 1px 0px 0px 0px;
    padding: 2px 1px 1px 2px;
  }
  #DeckControlButtons {
    padding: 0px 2px;
    qproperty-layoutSpacing: 4;
  }

#DeckRow_5_LoopCuesTransport {
  qproperty-layoutAlignment: 'AlignRight | AlignBottom';
  padding: 1px 2px 2px 1px;
  }
  #PlayCueRevHotCues {
    qproperty-layoutAlignment: 'AlignRight | AlignBottom';
  }
  #PlayContainerSmall {
    margin: 1px 0px;
    padding: 5px 1px 0px 2px;
    border-width: 0px 0px 0px 1px;
  }
  #MiniDeckSpinnyCoverContainer {
    margin: 1px 2px 1px 1px;
  }

WSpinny { /*
  This produces artifacts in spinny bg
  background-color: rgba(1, 1, 1, 10);
  This makes no difference, the spinny loads some default grey bg
  background: none;*/
}



  #TitleTextSmall {
    padding: 1px 3px 1px 1px;
  }
  #ArtistTextSmall {
    margin: 0px 2px 0px 1px;
    padding: 0px 1px 0px 0px;
    border-width: 1px 0px 0px 0px;
  }
  #PlayPositionTextSmall {
    padding: 0px 3px 2px 2px; /*
    border-width: 0px 1px 0px 0px;  */
  }

#RateContainer {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  /* for some reason padding-right & margin-right are not applied.
    #RateControls add the right margin. */
  padding: 4px 0px 3px 0px;
}

#BpmContainer {
  qproperty-layoutAlignment: 'AlignCenter';
  }
  #BpmText {
    qproperty-alignment: 'AlignCenter';
    padding: 0px;
    margin: 0px;
    }
  #BpmTextSmall {
    border-width: 1px 0px 0px 1px;
  }
  #RateText {
    qproperty-alignment: 'AlignCenter';
    padding: 0px;
    margin: 0px;
  }

#RateControls {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  margin-right: 2px;
  }
  #RateSlider {
  }
  #RateButtons {
    qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  }

#SyncBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  margin: 2px 1px 1px 0px;
}


/***************** Loop Controls *****************/
WBeatSpinBox,
#spinBoxTransition,
#LibraryBPMSpinBox  {
  selection-color: #000;
  selection-background-color: #d2d2d2;
  }
  WBeatSpinBox:hover,
  #spinBoxTransition:hover {
    background-color: #0a0a0a;
  }
  WBeatSpinBox:focus,
  #spinBoxTransition:focus {
    background-color: #000;
  }
  WBeatSpinBox#Spinbox_embedded {
    border-width: 3px 19px 2px 3px;
    border-image: url(skin:buttons_classic/spinbox_embedded_border.svg) 3 19 2 3;
    margin: 1px 0px 1px 1px;
    padding: 0px -17px 2px 1px;
    background-color: #0a0a0a;
    }
    WBeatSpinBox#Spinbox_embedded:hover {
      border-image: url(skin:buttons_classic/spinbox_embedded_border_hover.svg) 3 19 2 3;
      background-color: #000;
    }
    WBeatSpinBox#Spinbox_embedded:focus {
      border-image: url(skin:buttons_classic/spinbox_embedded_border_focus_orange.svg) 3 19 2 3;
      background-color: #000;
    }
  WBeatSpinBox#Spinbox_elevated {
    border-width: 2px 19px 2px 2px;
    border-image: url(skin:buttons_classic/spinbox_elevated_border.svg) 2 19 2 2;
    margin: 1px 0px 0px 1px;
    padding: 0px -17px 2px 1px;
    background-color: #0f0f0f;
    }
    WBeatSpinBox#Spinbox_elevated:hover {
      border-image: url(skin:buttons_classic/spinbox_elevated_border_hover.svg) 2 19 2 2;
    }
    WBeatSpinBox#Spinbox_elevated:focus {
      border-image: url(skin:buttons_classic/spinbox_elevated_border_focus.svg) 2 19 2 2;
    }
  #spinBoxTransition {
    border-width: 3px 19px 2px 3px;
    border-image: url(skin:buttons_classic/spinbox_embedded_border.svg) 3 19 2 3;
    width: 24px;
    height: 19px;
    padding: 0px -15px 0px 0px;
    margin: 0px 2px 3px 5px;
    }
    #spinBoxTransition:hover {
      border-image: url(skin:buttons_classic/spinbox_embedded_border_hover.svg) 3 19 2 3;
    }
    #spinBoxTransition:focus {
      border-image: url(skin:buttons_classic/spinbox_embedded_border_focus_orange.svg) 3 19 2 3;
    }

  WBeatSpinBox::up-button,
  WBeatSpinBox::down-button,
  #spinBoxTransition::up-button,
  #spinBoxTransition::down-button {
    subcontrol-origin: content;
    position: relative;
    /* as with spinbox: border is added to size.
      define it with same width as hover border, otherwise size jumps */
    width: 17px;
    padding: 0px;
    }
    WBeatSpinBox::up-button,
    #spinBoxTransition::up-button {
      height: 11px;
      subcontrol-position: top right;
      image: url(skin:/buttons_classic/spinbox_up.svg) no-repeat;
      }
      WBeatSpinBox::up-button {
        margin: -1px 0px 0px 0px;
        }
      #spinBoxTransition::up-button {
        margin: -1px -2px 0px 0px;
        }
    WBeatSpinBox::down-button,
    #spinBoxTransition::down-button {
      height: 11px;
      subcontrol-position: bottom right;
      image: url(skin:/buttons_classic/spinbox_down.svg) no-repeat;
      }
      WBeatSpinBox::down-button {
        margin: 0px 0px -2px 0px;
        }
      #spinBoxTransition::down-button {
        margin: 0px -2px -1px 0px;
        }

/********************** Loop Controls **********************/
/************** Decks  ********************************************************/



/************** Mixer  ********************************************************/
#MixerContainer {
  qproperty-layoutAlignment: 'AlignTop';
}

#Mixer {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding-top: 3px;
}

#MasterHeadphoneMixerContainer {
  padding: 2px 2px 2px 0px;
  }
  #MasterControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    padding: 2px;
  }
  #HeadphoneControls {
    qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
    padding: 2px;
  }
  #MasterHeadphoneSeparator {
    /* defines the height of the separator gap */
    padding-top: 2px;
  }

#MixerDecks {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding: 0px 5px 2px 5px;
  }
  #MixerChannel_2Decks {
    qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
  }

  #MixerChannel_4Decks {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
  }

  #MixerChannel_2Decks_Left {
    qproperty-layoutAlignment: 'AlignRight | AlignBottom';
    margin: 0px 2px;
  }

  #MixerChannel_2Decks_Right {
    qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
    margin: 0px 2px;
  }

  #VuAndSlider4decks {
    qproperty-layoutAlignment: 'AlignRight | AlignTop';
  }


#PFLVUMeterBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  padding: 4px 0px 5px 0px;
}

#VuMeterBox,
#VuMeterBoxMasterSingle {
  background-color: #040404;
  qproperty-layoutSpacing: 1;
}
#VuMeterBox {
  padding: 1px;
  }
  #VuMeterChannel2Decks,
  #VuMeterChannel4Decks,
  #VuMeterMaster2Decks,
  #VuMeterMaster4Decks {
    qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
    }
    #VuMeterChannel2Decks {
      margin: 0px 9px 2px 9px;
    }
    #VuMeterChannel4Decks {
      margin: 6px 3px 6px 9px;
    }
    #VuMeterMaster2Decks {
      margin: 0px 0px 2px 0px;
    }
    #VuMeterMaster4Decks {
      margin: 5px 0px;
    }

#VolumeGain2Decks {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  padding: 0px 0px 0px 0px;
}

#KnobCentered {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#EQKillButtonBoxLeft {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
}
#EQKillButtonBoxRight {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}

#CrossfaderAndSwitches2Decks {
  qproperty-layoutAlignment: 'AlignHCenter';
  padding: 0px;
}
#CrossfaderSwitch4Decks {
  qproperty-layoutAlignment: 'AlignRight';
  margin: 5px 5px 3px 0px;
}
#Crossfader {
  qproperty-layoutAlignment: 'AlignCenter';
  padding: 0px 0px 0px 1px;
}

#CrossfaderButtonContainerDeck {
  padding: 1px;
  border-bottom: 1px solid #333;
  border-right: 1px solid #333;
  border-bottom-right-radius: 1px;
  }
#CrossfaderButtonContainerAux {
  padding: 1px 1px 0px 1px;
  margin-left: 5px;
  border-right: 1px solid #333;
  }
  #CrossfaderButton[value="0"] {
  }
  #CrossfaderButton[value="1"] {
    background-color: #262626;
  }
/************** Mixer  ********************************************************/



/************** PreviewDeck ***************************************************/
#PreviewDeck {
  qproperty-layoutAlignment: 'AlignTop';
  padding: 1px 1px 0x 1px;
  margin: 0px 0px 4px 3px;
}

#PreviewDeckLeftPart,
#PreviewDeckRightPart {
  margin-bottom: 1px;
}

#PreviewTitleEjectRow {
  }
  #PreviewLabel {
    qproperty-alignment: 'AlignVCenter | AlignHCenter';
    border-width: 0px 1px 0px 0px;
    padding: 1px 3px 1px 2px;
    margin-bottom: 1px;
  }
  #PreviewDeckText {
    qproperty-layoutAlignment: 'AlignLeft | AlignTop';
    padding: 0px;
  }
    #PreviewTitle {
      margin: 2px 2px 2px 0px;
    }
    #PreviewBPM {
      padding: 4px 0px 2px 2px;
    }
  #PreviewEjectButton {
  }

#PreviewPlayBox {
  padding: 0px;
  margin: 0px 1px 0px 0px;
  border-width: 0px;
}

#PreviewVuMeter {
  margin: 0px 0px 0px 2px;
}
/************** PreviewDeck ***************************************************/



/************** SkinSettings **************************************************/
#SkinSettingsContainer {
}

#SkinSettings {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding: 2px 0px 2px 0px;
  border: 1px solid #585858;
  border-width: 0px 0px 1px 1px;

}
#SkinSettingsHeader {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding-right: 2px;
  }
  #SkinSettingsClose {
    margin-bottom: 1px;
    background-color: transparent;
    image: url(skin:/buttons_classic/btn__settings_close.svg) no-repeat center top;
  }

#SkinSettingsCategory {
  padding: 3px 10px 10px 4px;
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  border: 1px solid #1e1e1e;
  border-width: 0px;
  }
  #CategoryLabel {
    padding: 3px 0px 2px 3px;
  }
  #SkinSettingsLabelButton {
    padding: 0px 0px 0px 3px;
  }
  #SkinSettingsButton {
    padding-top: 1px;
    color: #d2d2d2;
  }


#SubmenuCover {
  background-color: rgba(15, 15, 15, 180);
}
/************** SkinSettings **************************************************/



/************** Mic Aux *******************************************************/
#MicAuxRack {
}

#MicRack, #AuxRack {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
  padding: 2px 3px 1px 4px;
  qproperty-layoutSpacing: 2;
  }

#MicAuxUnit {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
  }
  #MicAuxMainControlsFrame {
    border-radius: 1px;
    }
    #MicAuxMainControls {
      border-radius: 2px;
      padding: 0px 1px 0px 1px;
      border-bottom-left-radius: 1px;
      border-top-right-radius: 1px;
      }
      #MicAuxSubTitle {
        qproperty-alignment: 'AlignCenter | AlignTop';
        padding: 0px 0px 3px 1px;
      }
      #MicAuxPlayBox {
        qproperty-alignment: 'AlignCenter | AlignBottom';
        padding: 0px 0px 2px 1px;
      }
      #MicAuxAddBox {
        qproperty-alignment: 'AlignCenter | AlignBottom';
        padding: 0px 0px 8px 1px;
      }

  #MicAuxSubControlsFrame {
    margin: 3px 0px;
    border-radius: 1px;
    border-right: 0px;
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
    }
    #MicAuxSubControls {
      border-width: 0px;
      padding: 0px 1px 0px 1px;
      background-color: transparent;
      }
      #MicAuxGainPFlContainer {
        qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
        padding: 2px 0px 0px 0px;
        margin: 0px;
        }
        #MicAuxGainKnob {
          qproperty-layoutAlignment: 'AlignCenter';
        }
      #MicAuxFxButtons {
        qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
        padding: 2px 0px;
      }
      #MicAuxVUMeter {
        qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
        padding: 1px 1px 1px 1px;
      }

#MicDuckingContainer {
  qproperty-layoutAlignment: 'AlignCenter | AlignTop';
  padding: 1px 1px 3px 2px;
  }
  #MicDuckingStrengthKnob {
  qproperty-layoutAlignment: 'AlignHCenter';
    margin: 2px 0px 3px 1px;
  }

/************** Mic Aux *******************************************************/



/************** Samplers ******************************************************/
#SamplerRow {
  qproperty-layoutAlignment: 'AlignTop';
  margin: 0px 3px 5px 3px;
  qproperty-layoutSpacing: 3;
}

#SamplerDeck {
  padding: 1px 0px 2px 2px;
}

#SamplerDeckMini {
  padding: 1px;
}

#SamplerExpandButtonBox {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding: 1px 2px 1px 1px;
}

#SamplerText {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
  padding: 1px 3px 1px 4px;
  border-width: 0px 1px 0px 0px;
}

#SamplerTextSmall {
  qproperty-layoutAlignment: 'AlignLeft';
  padding: 0px 0px 0px 3px;
}

#SamplerPlay {
  padding: 1px 2px 1px 0px;
  border-width: 1px 0px 0px 0px;
  border-right: 0px;
  border-bottom: 0px;
  border-left: 0px;
}

#SamplerPlaySmall {
  padding: 1px;
}

#SamplerMiniControls {
  padding: 0px 0px 0px 2px;
}

#SamplerButtons {
  qproperty-layoutAlignment: 'AlignVCenter';
}

#SamplerDeck #OverviewBox {
  margin-bottom: 1px;
}

#SamplerHotcues {
  padding: 1px 1px 2px 1px;
}

#SamplerButtonGrid {
  border-width: 1px 1px 0px 0px;
  padding: 1px 0px 1px 0px;
}

#SamplerHotcues,
#SamplerPfl {
  qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
}

#SamplerGain {
  padding: 0px 0px 0px 2px;
  border-width: 1px 0px 0px 0px;
}

#SamplerPfl {
  qproperty-layoutAlignment: 'AlignRight | AlignBottom';
  border-width: 1px 1px 0px 0px;
  padding: 0px 4px 1px 5px;
}

#SamplerVU {
  padding: 1px 3px 0px 3px;
  qproperty-layoutAlignment: 'AlignCenter';
  border-width: 0px 1px 0px 0px;
}

#SamplerRateControls {
  padding: 0px 1px 1px 0px;
  }
  #SamplerPitchSlider {
    padding: 0px 0px 1px 0px;
    qproperty-layoutAlignment: 'AlignRight | AlignBottom';
  }
/************** Samplers *****************************************************/



/************** Effects ******************************************************/
#FxRack {
  qproperty-layoutAlignment: 'AlignCenter | AlignTop';
}

#FxUnit1, #FxUnit2, #FxUnit3, #FxUnit4 {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
  padding: 2px;
}

#FxSlotsCollapsed,
#FxSlotsExpanded {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}

#FxUnitControlsExpanded, #FxUnitControlsCollapsed {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  padding: 0px 0px 0px 3px;
}

#SuperMixKnob {
  margin-bottom: 1px;
}

#FxUnit1_ExpandCollapseButton,
#FxUnit2_ExpandCollapseButton,
#FxUnit3_ExpandCollapseButton,
#FxUnit4_ExpandCollapseButton {
  }
  #ExpandCollapseButton {
    border: 1px solid #000;
  }

#FxUnitControlsCollapsed #FxUnitLabel {
  margin: 0px 3px 0px 5px;
}
#FxUnitControlsExpanded #FxUnitLabel {
  margin: 2px 0px;
}

#FxSlotsCollapsed #FxSlotContainer {
  margin: 2px 1px 1px 1px;
}
#FxSlotsExpanded #FxSlotContainer {
  margin: 1px;
}

#FxSlot1,
#FxSlot2,
#FxSlot3 {
  qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
  padding: 2px 4px 1px 4px;
}
#FxSlotBorder1[highlight="1"],
#FxSlotBorder2[highlight="1"],
#FxSlotBorder3[highlight="1"] {
  border: 1px solid #d08e00;
  background-color: rgba(0,0,0,125);
}

#FxFocusButtonBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  padding: 0px 0px 0px 4px;
}

#FxMetaKnob {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  padding: 1px 4px 2px 4px;
}

#FxKnobContainer {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#FxKnob {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
  margin-left: 1px;
}

#FxButtonBox {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#FxUnitKnob {
  qproperty-layoutAlignment: 'AlignRight';
  padding: 3px;
}
WEffectSelector {
  /* Fixes the white bars on the top/bottom of the popup on Mac OS X */
  min-height: 13px;
  margin: 1px 0px 0px 0px;
  /* If you use margin top/bottom 0, the combo box shrinks in width (go figure) and
      names start getting cut off. Adding explicit padding improves this. */
  padding: 4px 0px 4px 4px;
  /* The 3D frame on the combo box becomes flat when you give it a border
  border-radius: 3px; */
  }
#fadeModeCombobox {
  height: 18px;
  margin: 0px 0px 3px 1px;
  padding: 1px 0px 1px 4px;
  }

  WEffectSelector QAbstractScrollArea,
  #fadeModeCombobox QAbstractScrollArea {
    width: 142px;
    /* padding-left: 6px; */
    /* On Linux, this is not applied but font color from WEffectSelector
    is inherited.
    On Windows, it must be defined here */
    border: 1px solid #444;
    border-radius: 2px;
    padding: 0px;
    margin: 0px;
  }
  /* selected item */
  WEffectSelector::checked,
  #fadeModeCombobox::checked {
    /* not applied
    padding-left: 5px;	*/
    padding: 0px;
    margin: 0px;
    color: #eee;
  }
  /* hovered items */
  WEffectSelector::item:selected,
  #fadeModeCombobox::item:selected {
    background-color: #333;
  /* Already of those two destroys font config and puts tick mark behind text:
    margin: 0px;
    padding: 0px; */
  /* This moves the tick mark behind item text,
    text sits at left border now
    border: 0; */
  }
  WEffectSelector::indicator,
  #fadeModeCombobox::indicator {
  /* This is sufficient to completely hide the tick mark, but
    this alone would show an empty, shadowed box instead of tick mark
    background-color: transparent;*/
  /* This should decrease the tick mark's left & right margin but is not respected */
    margin: 0px;
    padding: 0px;
  }

#FxSuperLinkButton,
#FxSuperLinkInvertButton {
  }
  #FxSuperLinkButton {
    margin: 0px 1px 0px 0px;
    }
  #FxSuperLinkInvertButton {
    margin: 0px;
  }

#FxSuperLinkButton[value="0"],
#FxSuperLinkInvertButton[displayValue="0"] {
  background-color: #4b4b4b;
}
#FxSuperLinkInvertButton[displayValue="1"] {
  background-color: #9C0900;
  }
  #FxSuperLinkInvertButton[displayValue="1"]:hover {
    background-color: #B50A00;
  }

#FxSuperLinkButton[value="1"] {
  background-color: #5b9601;
  }
#FxSuperLinkButton[value="2"] {	/*
  a simple way to achieve a partitioning in thirds	*/
  background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
    stop: 0 #5b9601,
    stop: 0.33 #5b9601,
    stop: 0.34 #333,
    stop: 1 #333);
  }
#FxSuperLinkButton[value="3"] {
  background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
    stop: 0 #333,
    stop: 0.66 #333,
    stop: 0.67 #5b9601,
    stop: 1 #5b9601);
  }
#FxSuperLinkButton[value="4"] {
  background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
    stop: 0 #5b9601,
    stop: 0.330000 #5b9601,
    stop: 0.340000 #333,
    stop: 0.660000 #333,
    stop: 0.670000 #5b9601,
    stop: 1 #5b9601);
  }
/************** Effects *******************************************************/



/************** Library *******************************************************/
#LibrarySingleton {
  /* This doesn't work as expected:
  it appears LibrarySingleton is displayed twice (nested in itself),
  so padding/margin would double.
  Placed a plain spacer in library.xml which works reliably
  padding-top: 5px;*/
}

#LibraryContainer {
  /* make a smooth transition from toolbar at the bottom to
    darker skin background at the top.
    Splitter handles should be translucent for this to work. */
  background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #0f0f0f,
    stop:1 #1e1e1e);
}

WLibrary,
#SidebarBox {
  padding: 2px 2px 0px 2px;
  border-bottom: 0px;
  border-left: 1px solid qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #333,
    stop:1 #1e1e1e);
  border-right: 1px solid qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #0a0a0a,
    stop:1 #1e1e1e);
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
}

#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView {
  border-top: 1px solid #0a0a0a;
  border-right: 1px solid qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #333,
    stop:1 #444);
  border-bottom: 1px solid #444;
  border-left: 1px solid #0a0a0a;
  alternate-background-color: #0a0a0a;
  selection-background-color: #5e4507;
}

#LibraryContainer QTableView:focus,
#LibraryContainer QTreeView:focus,
#LibraryContainer QTextBrowser:focus {
  border: 1px solid #ff6600;
}

#LibraryContainer QTreeView {
  show-decoration-selected: 0;
}

/* selected items in Tree and Tracks table */
#LibraryContainer QTreeView::item:selected,
#LibraryContainer QTableView::item:selected,
#LibraryBPMButton::item:selected {
/* this doesn't style BPM value in selected row
#LibraryContainer QTableView::item:selected #LibraryBPMSpinBox::item:selected,
#LibraryContainer QTableView::item:selected > #LibraryBPMSpinBox::item:selected */
  color: #fff;
  background-color: #5e4507;
}

/* checkbox in library "Played" column */
#LibraryContainer QTableView::indicator {/*
  This results in 10x10px + 1px border = 12x12px
  Omitting this definitions makes the checkbox grow to
  12x12px + 1px border = 14x14px
  which also miraculously makes the BPM icon grow to 14x14px
  Neither checkbox nor BPM icon size have an effect on the size... */
  width: 10px;
  height: 10px;
  /* border is added to size defined above */
  border: 1px solid transparent;
  margin: 0px;
  padding: 0px;
  }
  #LibraryContainer QTableView::indicator:hover {
    border: 1px solid #888;
  }
  #LibraryContainer QTableView::indicator:checked,
  #LibraryContainer QTableView::indicator:checked:selected {
    image: url(skin:/buttons_classic/btn__lib_checkmark_orange.svg);
    border: 1px solid #ff6600;
    }
    #LibraryContainer QTableView::indicator:checked:hover,
    #LibraryContainer QTableView::indicator:selected:hover {
      border: 1px solid #aaa;
    }
  #LibraryContainer QTableView::indicator:unchecked {
    image: none;
    border: 1px solid rgba(151,151,151,128);
    }
    #LibraryContainer QTableView::indicator:unchecked:hover,
    #LibraryContainer QTableView::indicator:selected {
      border: 1px solid #888;
    }

/* Table cell in edit mode */
WLibrary QLineEdit,
#LibraryBPMSpinBox {
  color: #ddd;
  background-color: #0f0f0f;
  selection-color: #000;
  selection-background-color: #ccc;
  border: 1px solid #5E4507;
}

/* Entire BPM cell */
/* Lock icon at the left */
#LibraryBPMButton::indicator:checked {
  image: url(skin:/buttons_classic/btn__lib_bpm_locked_orange.svg);
  }
#LibraryBPMButton::indicator:unchecked {
  image: url(skin:/buttons_classic/btn__lib_bpm_unlocked_grey.svg);
  }
/* BPM value */
#LibraryBPMButton::item {
  }
#LibraryBPMSpinBox {
  border-left: 0px;
}
/* When activated, the left border of the spinbox shows an
  artefact of the inactive BPM value. */
#LibraryBPMSpinBox::up-button,
#LibraryBPMSpinBox::down-button {
  background-color: #5E4507;
  }
  #LibraryBPMSpinBox::up-button {
    image: url(skin:/buttons_classic/btn__lib_spinbox_up_white.svg) no-repeat;
    }
  #LibraryBPMSpinBox::down-button {
    image: url(skin:/buttons_classic/btn__lib_spinbox_down_white.svg) no-repeat;
    }
/* remove OS focus indicator from BPM cell */
WLibrary QCheckBox,
#LibraryBPMButton::item:selected,
WCueMenuPopup QPushButton:focus {
  outline: none;
}

/* Button in library "Preview" column */
#LibraryPreviewButton {/*
  width: 23px;
  height: 12px;*/
  background: transparent;
  margin: 0px;
  padding: 0px;
  border-radius: 2px;
  border: 1px solid transparent;
  }
  #LibraryPreviewButton:!checked {
    image: url(skin:/buttons_classic/btn__lib_preview_play_grey.svg);
    }
    #LibraryPreviewButton:!checked:hover {
      border: 1px solid #5e4507;
      background: #0f0f0f;
    }
  #LibraryPreviewButton:checked {
    image: url(skin:/buttons_classic/btn__lib_preview_pause.svg);
    background-color: #000;
    border: 1px solid #5e4507;
    }
    #LibraryPreviewButton:checked:hover {
      border: 1px solid #888;
    }

#LibraryContainer QHeaderView {
  font-size: 13px/15px;
  color: #bbb;
  border-bottom: 1px solid #000;
  }
  #LibraryContainer QHeaderView::section {
    height: 18px;
    border: 0px;
    border-right: 1px solid #000;
    border-bottom: 1px solid #000;
    padding: 0px 2px;
  }

  #LibraryContainer QHeaderView::up-arrow,
  #LibraryContainer QHeaderView::down-arrow {
    width: 12px;
    padding-left: 3px;
    padding-right: 3px;
    border-right: 1px solid #000;
    /* gradient colors should match those of QHeaderView gradient,
      with a little transparency added to not cut off the header label */
    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
      stop:0 rgba(34,34,34,190),
      stop:1 rgba(17,17,17,190));
    }
    #LibraryContainer QHeaderView::up-arrow {
      image: url(skin:/buttons_classic/btn__lib_sort_up.png);
      }
    #LibraryContainer QHeaderView::down-arrow {
      image: url(skin:/style_classic/btn_lib_sort_down.png);
    }

/*********** scrollbars *********************************/
#LibraryContainer QScrollBar,
WEffectSelector QAbstractScrollArea QScrollBar {
  border: 0px solid #585858;
  background: #000;
  border-radius: 2px;
  padding: 1px;
  color: #999999;
  }
  #LibraryContainer QScrollBar:horizontal,
  WEffectSelector QAbstractScrollArea QScrollBar:horizontal {
    min-width: 12px;
    height: 15px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    background-color: #000;
  }
  #LibraryContainer QScrollBar:vertical,
  WEffectSelector QAbstractScrollArea QScrollBar:vertical {
    min-height: 12px;
    width: 15px;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
    color: #b3b3b3;
    background-color: #000;
  }
  /* catch scroll bar of focused treeview like this:
  #LibraryContainer QTreeView:focus QScrollBar:vertical {
  }*/
#LibraryContainer QScrollBar::handle:horizontal,
WEffectSelector QAbstractScrollArea QScrollBar::handle:horizontal {
  min-width: 25px;
  border-radius: 2px;
  background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #725309,
    stop:1 #412f05);
}
#LibraryContainer QScrollBar::handle:vertical,
WEffectSelector QAbstractScrollArea QScrollBar::handle:vertical {
  min-height: 25px;
  border-radius: 2px;
  background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
    stop:0 #725309,
    stop:1 #412f05);
}

/* "add-page" and "sub-page" are the gutter of the scrollbar */
#LibraryContainer QScrollBar::add-page,
#LibraryContainer QScrollBar::sub-page,
WEffectSelector QAbstractScrollArea QScrollBar::add-page,
WEffectSelector QAbstractScrollArea QScrollBar::sub-page {
  min-width: 15px;
  min-height: 15px;
  background-color: #000;
  border-radius: 2px;
}
/* Turn off buttons */
#LibraryContainer QScrollBar::add-line,
#LibraryContainer QScrollBar::sub-line,
WEffectSelector QAbstractScrollArea QScrollBar::add-line,
WEffectSelector QAbstractScrollArea QScrollBar::sub-line{
  width: 0px;
  height: 0px;
  border: 0px;
}

/* Corner in between two scrollbars */
#LibraryContainer QAbstractScrollArea::corner,
WEffectSelector QAbstractScrollArea QScrollBar::corner {
  background-color: #1e1e1e;
}
/*********** scrollbars *********************************/


/*********** library search bar *********************************/
#SearchLineBox {
  padding: 2px;
  margin-bottom: 3px;
  margin-left: 2px;
}

WSearchLineEdit {
  padding: 2px;
  background-color: #0f0f0f;
  selection-color: #000;
  selection-background-color: #ccc;
  }
  WSearchLineEdit:focus {
    padding: 1px;
    border: 2px solid #d08e00;
  }
  /* Clear button: see /skins/default.qss */

/************ splitters ***********************/
/* HorizontalSplitter
  (the splitter itself is horizontal)
  Used to split
  - Waveforms & Decks/FX/etc
  - Library feature & Coverart */
#HorizontalSplitter {
  padding: 0px;
  margin: 0px;
}

#HorizontalSplitter::handle {
    image: url(skin:/style_classic/splitter_handle_horizontal_unchecked.png); /*
    border-top: 1px solid #000; */
  }
  #HorizontalSplitter::handle:pressed,
  #HorizontalSplitter::handle:hover {
    image: url(skin:/style_classic/splitter_handle_horizontal_checked.png);
  }
#HorizontalSplitter::handle:vertical {
  height: 9px;
}

/* VerticalSplitter
  (the splitter itself is vertical)
  Used to split Library sidebar & Tracks table */
#VerticalSplitter::handle {
  image: url(skin:/style_classic/splitter_handle_unchecked.png);
}
#VerticalSplitter::handle:pressed,
#VerticalSplitter::handle:hover {
  image: url(skin:/style_classic/splitter_handle_checked.png);
}
#VerticalSplitter::handle:vertical {
  /* 'height' works although it's actually the width of the handle */
  height: 10px;
}
/************ splitters ***********************/


/* Extra declaration for QRadioButton otherwise it shows up with wrong colors in Linux with Gnome */
WLibrary QLabel, WLibrary QRadioButton {
  background: transparent;
}

/* Additional space for QRadionButtons */
WLibrary QRadioButton {
  /* bottom margin! */
  margin: 2px 3px 2px 3px;
}

/* Additional space for QLabels */
#DlgAnalysis QLabel,
#DlgAutoDJ QLabel {
  margin: 2px 5px 5px 1px;
}

WLibrary QRadioButton::indicator:checked {
  background: url(skin:/buttons_classic/btn__lib_radio_button_on_yellow.svg) center center;
}

WLibrary QRadioButton::indicator:unchecked {
  background: url(skin:/buttons_classic/btn__lib_radio_button_off.svg) center center;
}

/* Library feature pushbuttons
  Don't use 'WLibrary QPushButton' here, as this would apply padding
  to the Preview & BPM lock buttons as well.
  Define the buttons fore every Library feature instead. */
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgAutoDJ > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  margin: 0px 6px 3px 0px;
  padding: 0px;
  height: 20px;
  }
#DlgMissing > QPushButton,
#DlgHidden > QPushButton,
#DlgRecording > QPushButton,
#DlgAnalysis > QPushButton {
  padding: 0px 5px;
  }
  QPushButton#pushButtonAutoDJ {
    min-width: 40px;
  }
  /* Space in between 'Enable AutoDJ' and transition time spinbox */
  #DlgAutoDJ > #horizontalSpacer {
    width: 100px;
  }
  /* Push 'New' radio button away from corner */
  #radioButtonRecentlyAdded {
    margin-left: 10px;
  }
  /* Space in between 'All' radio button and 'Select All' button */
  QPushButton#pushButtonSelectAll {
    margin-left: 12px;
  }

#labelRecPrefix,
#labelRecFilename,
#labelRecStatistics {
  text-transform: none;
  font-size: 13px;
  padding: 0px 0px 3px 0px;
  }
  #labelRecFilename {
    font-weight: bold;
  }
  #labelRecPrefix,
  #labelRecStatistics {
    font-weight: normal;
  }

#LibraryContainer QTreeView {
  show-decoration-selected: 0;
}
/* triangle for closed/opened branches in treeview */
/* closed */
#LibraryContainer QTreeView::branch:closed:has-children:!has-siblings:!selected,
#LibraryContainer QTreeView::branch:closed:has-children:has-siblings:!selected {
/*  Suppresses that selected sidebar items branch indicator shows wrong color when out of focus ; lp:880588 */
  border-image: none;
    image: url(skin:/style_classic/library_branch_closed_grey.png);
  }
  /* closed, selected */
  #LibraryContainer QTreeView::branch:closed:has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:closed:has-children:has-siblings:selected {
    border-image: none;
    image: url(skin:/style_classic/library_branch_closed_selected_white.png);
    background-color: #5e4507;
  }
/* open */
#LibraryContainer QTreeView::branch:open:has-children:!has-siblings,
#LibraryContainer QTreeView::branch:open:has-children:has-siblings {
  border-image: none;
  image: url(skin:/style_classic/library_branch_open_grey.png);
  }
  /* open, selected */
  #LibraryContainer QTreeView::branch:open:has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:has-children:has-siblings:selected {
    border-image: none;
    image: url(skin:/style_classic/library_branch_open_selected_white.png);
    background-color: #5e4507;
    }
  /* space left of selected child item */
  #LibraryContainer QTreeView::branch:closed:!has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:closed:!has-children:has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:!has-children:!has-siblings:selected,
  #LibraryContainer QTreeView::branch:open:!has-children:has-siblings:selected {
    border-image: none;
    background-color: #0f0f0f;
  }
/************** Library *******************************************************/



/************** common styles for WEffectSelector ******************************
*************** QSpinBox, QMenu, QToolTip *************************************/
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox QAbstractScrollArea,
QToolTip,
WBeatSpinBox QMenu,
#LibraryContainer QMenu,
WCueMenuPopup,
WCueMenuPopup QMenu,
WCoverArtMenu,
WTrackMenu,
WTrackMenu QMenu,
#SkinSettings {
  padding: 3px;
  border: 1px solid #888;
  border-radius: 2px;
}

#SkinContainer,
#CrossfaderButtonContainerDeck,
#CrossfaderButtonContainerAux,
#CrossfaderButton[value="0"],
#LibraryContainer QTableView,
#LibraryContainer QTextBrowser,
#LibraryContainer QTreeView,
QToolTip,
WBeatSpinBox QMenu,
  WCueMenuPopup,
  #LibraryContainer QMenu,
  WCueMenuPopup QMenu,
  WCoverArtMenu,
  WTrackMenu,
  WTrackMenu QMenu,
WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCueMenuPopup QLabel,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item,
#LibraryContainer QMenu QCheckBox,
WTrackMenu QCheckBox,
WTrackMenu QMenu QCheckBox,
WBeatSpinBox,
#spinBoxTransition,
#SkinSettings,
WSearchLineEdit,
WEffectSelector QAbstractScrollArea,
#fadeModeCombobox QAbstractScrollArea,
WEffectSelector, WEffectSelector::item,
#fadeModeCombobox, #fadeModeCombobox::item {
  background-color: #0f0f0f;
}
WBeatSpinBox,
#spinBoxTransition,
#SkinSettings,
WEffectSelector, WEffectSelector QAbstractScrollArea,
#fadeModeCombobox, #fadeModeCombobox QAbstractScrollArea {
  font-size: 13px/13px;
}
  /* hovered items */
  WEffectSelector::item:selected,
  #fadeModeCombobox::item:selected,
  WBeatSpinBox QMenu::item:selected,
  #LibraryContainer QMenu::item:selected,
  WCueMenuPopup QMenu::item:selected,
  WCoverArtMenu::item:selected,
  WTrackMenu::item:selected,
  WTrackMenu QMenu::item:selected,
  #LibraryContainer QMenu QCheckBox:selected,
  #LibraryContainer QMenu QCheckBox:focus,  /* selected by keyboard */
  #LibraryContainer QMenu QCheckBox:hover, /* mouse hover */
  WTrackMenu QCheckBox:selected,
  WTrackMenu QCheckBox:focus,
  WTrackMenu QCheckBox:hover,
  WTrackMenu QMenu QCheckBox:selected,
  WTrackMenu QMenu QCheckBox:focus,
  WTrackMenu QMenu QCheckBox:hover,
  #SkinSettingsButton:hover,
  #SkinSettingsLabelButton:hover {
    background-color: #5E4507;
    color: white;
    /* remove OS focus indicator */
    outline: none;
  }
  /* hover over checked effect */
  WEffectSelector::item:checked:selected,
  #fadeModeCombobox::item:checked:selected {
    background-color: #2a1e03;
    color: #fff;
    }


WEffectSelector,
#fadeModeCombobox {
  font-weight: bold;
  text-transform: uppercase;
  /* The 3D frame on the combo box becomes flat when you give it a border
  border-radius: 3px; */
  }
  WEffectSelector {
    /* If you use margin top/bottom 0, the combo box shrinks in width (go figure) and
        names start getting cut off. Adding explicit padding improves this. */
    padding: 0px 0px 2px 5px;
    margin: 0px;
  }
  #fadeModeCombobox {
    height: 19px;
    padding: 0px 0px 1px 5px;
    margin: 0px 1px 2px 1px;
  }
  WEffectSelector::down-arrow,
  #fadeModeCombobox::down-arrow {
    image: url(skin:/buttons_classic/btn__fx_selector_down.svg);
    border: 0;
    padding: 0;
    margin: 0;
    }
    WEffectSelector::down-arrow:hover,
    #fadeModeCombobox::down-arrow:hover {
      image: url(skin:/buttons_classic/btn__fx_selector_down_pressed.svg);
    }

  WEffectSelector QAbstractScrollArea {
    min-width: 160px;
  }
  #fadeModeCombobox QAbstractScrollArea {
    min-width: 185px;
  }
  WEffectSelector::indicator:checked,
  #fadeModeCombobox::indicator:checked {
    /* checkbox container is 28 x 22px;
      use margin + border to create a square checkbox sized like kill buttons */
    margin: 2px;
    image: url(skin:/buttons_classic/btn__lib_checkmark_orange.svg);
  }
  WEffectSelector::checked, /* selected item */
  WEffectSelector::indicator, /* checkbox, tick mark */
  WEffectSelector::drop-down,
  WEffectSelector::indicator:!checked,
  #fadeModeCombobox::checked, /* selected mode */
  #fadeModeCombobox::indicator, /* checkbox, tick mark */
  #fadeModeCombobox::drop-down,
  #fadeModeCombobox::indicator:!checked,
  WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item,
  #LibraryContainer QMenu QCheckBox,
  WTrackMenu QCheckBox,
  WTrackMenu QMenu QCheckBox {
      padding: 0px;
      margin: 0px;
      image: none;
      outline: none;
      border: 0px solid transparent;
    }
  WBeatSpinBox QMenu::separator,
  #LibraryContainer QMenu::separator,
  WCueMenuPopup QMenu::separator,
  WTrackMenu::separator,
  WTrackMenu QMenu::separator,
  #SkinSettingsSeparator {
    border-top: 1px solid #000;
    border-bottom: 1px solid #222;
    }
    WBeatSpinBox QMenu::separator,
    #LibraryContainer QMenu::separator,
    WCueMenuPopup QMenu::separator,
    WTrackMenu::separator,
    WTrackMenu QMenu::separator {
        height: 0px;
        margin: 4px;
      }
    #SkinSettingsSeparator {
      margin: 0px 4px 4px 4px;
    }
  WBeatSpinBox QMenu::item,
  #LibraryContainer QMenu::item,
  WCueMenuPopup QMenu::item,
  WCoverArtMenu::item,
  WTrackMenu::item,
  WTrackMenu QMenu::item {
  /* Right padding creates a margin to the menu expand arrow.
    Left padding should be bigger than menu icon width + menu icon
    left/right margin */
    padding: 5px 12px 5px 26px;
  }
  /* Icons in QLineEdit menus:
   beatsize spinbox, searchbox, editable track properties */
  WBeatSpinBox QMenu::icon,
  #LibraryContainer QMenu::icon,
  WCueMenuPopup QMenu::icon,
  WTrackMenu::icon,
  WTrackMenu QMenu::icon,
  /* checkbox in Crate name context menu:
    "[ ] Auto DJ Track Source"  */
  #LibraryContainer QMenu::indicator,
  WTrackMenu::indicator,
  WTrackMenu QMenu::indicator {
    margin: 0px 4px 0px 5px;
    }
  /* items in Crate sub menu */
  #LibraryContainer QMenu QCheckBox,
  WTrackMenu QCheckBox,
  WTrackMenu QMenu QCheckBox {
    padding: 3px 10px 3px 5px;
    }
  #LibraryContainer QMenu QCheckBox::indicator,
  #LibraryContainer QMenu::indicator,
  WCueMenuPopup QMenu::indicator,
  WTrackMenu QCheckBox::indicator,
  WTrackMenu::indicator,
  WTrackMenu QMenu QCheckBox::indicator,
  WTrackMenu QMenu::indicator {
    width: 13px;
    height: 13px;
    border: 1px solid #333;
    border-radius: 1px;
    background-color: #000;
    /* remove OS focus indicator */
    outline: none;
    }
  #LibraryContainer QMenu QCheckBox::indicator:checked,
  #LibraryContainer QMenu::indicator:checked,
  WTrackMenu QCheckBox::indicator:checked,
  WTrackMenu::indicator:checked,
  WTrackMenu QMenu QCheckBox::indicator:checked,
  WTrackMenu QMenu::indicator:checked,
  WCueMenuPopup QMenu::indicator:checked {
    image: url(skin:/buttons_classic/btn__lib_checkmark_orange.svg);
    }
  /* disabled menu item and checkbox */
  #LibraryContainer QMenu QCheckBox:!enabled,
  #LibraryContainer QMenu::item:!enabled,
  WTrackMenu QCheckBox:!enabled,
  WTrackMenu::item:!enabled,
  WTrackMenu QMenu QCheckBox:!enabled,
  WTrackMenu QMenu::item:!enabled,
  WCueMenuPopup QMenu::item:!enabled,
  WCoverArtMenu::item:!enabled,
  #LibraryContainer QMenu QCheckBox::indicator:!enabled,
  WTrackMenu QCheckBox::indicator:!enabled,
  WTrackMenu QMenu QCheckBox::indicator:!enabled {
    color: #494949;
    }
  #LibraryContainer QMenu QCheckBox::indicator:!enabled:!checked,
  #LibraryContainer QMenu::indicator:!enabled:!checked,
  WTrackMenu QCheckBox::indicator:!enabled:!checked,
  WTrackMenu::indicator:!enabled:!checked,
  WTrackMenu QMenu QCheckBox::indicator:!enabled:!checked,
  WTrackMenu QMenu::indicator:!enabled:!checked,
  WCueMenuPopup QMenu::indicator:!enabled:!checked {
    border: 1px solid #222;
    background-color: #222;
    }
  #LibraryContainer QMenu QCheckBox::indicator:!enabled:checked,
  WTrackMenu QCheckBox::indicator:!enabled:checked,
  WTrackMenu QMenu QCheckBox::indicator:!enabled:checked {
    image: url(skin:/buttons_classic/btn__lib_checkmark_grey.svg);
    border: 1px solid #222;
    background-color: #222;
    }
  #LibraryContainer QMenu QCheckBox::indicator:indeterminate,
  #LibraryContainer QCheckBox::indicator:indeterminate:!enabled,
  WTrackMenu QCheckBox::indicator:indeterminate,
  WTrackMenu QMenu QCheckBox::indicator:indeterminate {
    image: url(skin:/buttons_classic/btn__lib_checkmark_grey.svg);
  }

  #LibraryContainer QMenu::right-arrow,
  WTrackMenu::right-arrow,
  WTrackMenu QMenu::right-arrow {
    width: 10px;
    height: 10px;
    image: url(skin:/style_classic/menu_arrow_yellow.svg);
    }
  #LibraryContainer QMenu::right-arrow:selected,
  WTrackMenu::right-arrow:selected,
  WTrackMenu QMenu::right-arrow:selected {
    image: url(skin:/style_classic/menu_arrow_white.svg);
  }

  #LibraryContainer QHeaderView QMenu::indicator {
    width: 10px;
    height: 10px;
    margin-left: 2px;
    border: none;
    background: none;
    }
    #LibraryContainer QHeaderView QMenu::indicator:checked {
      image: url(skin:/buttons_classic/btn__lib_checkmark_orange.svg);
    }
/************** common styles for WEffectSelector ******************************
*************** QSpinBox, QMenu, QToolTip *************************************/



/************** little helpers ************************************************/
#AlignLeft {
  qproperty-layoutAlignment: 'AlignLeft';
}

#AlignLeftTop {
  qproperty-layoutAlignment: 'AlignLeft | AlignTop';
}

#AlignLeftBottom {
  qproperty-layoutAlignment: 'AlignLeft | AlignBottom';
}

#AlignRight {
  qproperty-layoutAlignment: 'AlignRight';
}

#AlignRightTop {
  qproperty-layoutAlignment: 'AlignRight | AlignTop';
}

#AlignRightBottom {
  qproperty-layoutAlignment: 'AlignRight | AlignBottom';
}

#AlignRightCenter {
  qproperty-layoutAlignment: 'AlignRight | AlignVCenter';
}

#AlignCenter {
  qproperty-layoutAlignment: 'AlignHCenter | AlignVCenter';
}

#AlignCenterTop {
  qproperty-layoutAlignment: 'AlignHCenter | AlignTop';
}

#AlignBottom {
  qproperty-layoutAlignment: 'AlignHCenter | AlignBottom';
}

#TEST {
  background-color: #456113;
}

#Spacer00 {
  background-color: #000;
}

#Spacer0f {
  background-color: #0f0f0f;
}

#Spacer1e {
  background-color: #1e1e1e;
}

#Spacer58 {
  background-color: #585858;
}

#Border58 {
  border: 1px solid #585858;
}
